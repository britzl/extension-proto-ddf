/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gamesys/gui_ddf.proto */

#ifndef PROTOBUF_C_gamesys_2fgui_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_gamesys_2fgui_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"

typedef struct DmGuiDDF__NodeDesc DmGuiDDF__NodeDesc;
typedef struct DmGuiDDF__SceneDesc DmGuiDDF__SceneDesc;
typedef struct DmGuiDDF__SceneDesc__FontDesc DmGuiDDF__SceneDesc__FontDesc;
typedef struct DmGuiDDF__SceneDesc__TextureDesc DmGuiDDF__SceneDesc__TextureDesc;
typedef struct DmGuiDDF__SceneDesc__LayerDesc DmGuiDDF__SceneDesc__LayerDesc;
typedef struct DmGuiDDF__SceneDesc__LayoutDesc DmGuiDDF__SceneDesc__LayoutDesc;
typedef struct DmGuiDDF__SceneDesc__SpineSceneDesc DmGuiDDF__SceneDesc__SpineSceneDesc;
typedef struct DmGuiDDF__SceneDesc__ResourceDesc DmGuiDDF__SceneDesc__ResourceDesc;
typedef struct DmGuiDDF__SceneDesc__ParticleFXDesc DmGuiDDF__SceneDesc__ParticleFXDesc;
typedef struct DmGuiDDF__LayoutChanged DmGuiDDF__LayoutChanged;


/* --- enums --- */

/*
 * NOTE: Enum values must correspond to the enum values in dmGui
 */
typedef enum _DmGuiDDF__NodeDesc__Type {
  DM_GUI_DDF__NODE_DESC__TYPE__TYPE_BOX = 0,
  DM_GUI_DDF__NODE_DESC__TYPE__TYPE_TEXT = 1,
  DM_GUI_DDF__NODE_DESC__TYPE__TYPE_PIE = 2,
  DM_GUI_DDF__NODE_DESC__TYPE__TYPE_TEMPLATE = 3,
  /*
   * Deprecated
   */
  DM_GUI_DDF__NODE_DESC__TYPE__TYPE_SPINE = 4,
  DM_GUI_DDF__NODE_DESC__TYPE__TYPE_PARTICLEFX = 5,
  DM_GUI_DDF__NODE_DESC__TYPE__TYPE_CUSTOM = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__TYPE)
} DmGuiDDF__NodeDesc__Type;
/*
 * NOTE: Enum values must correspond to the enum values in dmGui
 */
typedef enum _DmGuiDDF__NodeDesc__BlendMode {
  DM_GUI_DDF__NODE_DESC__BLEND_MODE__BLEND_MODE_ALPHA = 0,
  DM_GUI_DDF__NODE_DESC__BLEND_MODE__BLEND_MODE_ADD = 1,
  DM_GUI_DDF__NODE_DESC__BLEND_MODE__BLEND_MODE_ADD_ALPHA = 2,
  DM_GUI_DDF__NODE_DESC__BLEND_MODE__BLEND_MODE_MULT = 3,
  DM_GUI_DDF__NODE_DESC__BLEND_MODE__BLEND_MODE_SCREEN = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__BLEND_MODE)
} DmGuiDDF__NodeDesc__BlendMode;
/*
 * NOTE: Enum values must correspond to the enum values in dmGui
 */
typedef enum _DmGuiDDF__NodeDesc__ClippingMode {
  DM_GUI_DDF__NODE_DESC__CLIPPING_MODE__CLIPPING_MODE_NONE = 0,
  DM_GUI_DDF__NODE_DESC__CLIPPING_MODE__CLIPPING_MODE_STENCIL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__CLIPPING_MODE)
} DmGuiDDF__NodeDesc__ClippingMode;
/*
 * NOTE: Enum values must correspond to the enum values in dmGui
 */
typedef enum _DmGuiDDF__NodeDesc__XAnchor {
  DM_GUI_DDF__NODE_DESC__XANCHOR__XANCHOR_NONE = 0,
  DM_GUI_DDF__NODE_DESC__XANCHOR__XANCHOR_LEFT = 1,
  DM_GUI_DDF__NODE_DESC__XANCHOR__XANCHOR_RIGHT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__XANCHOR)
} DmGuiDDF__NodeDesc__XAnchor;
/*
 * NOTE: Enum values must correspond to the enum values in dmGui
 */
typedef enum _DmGuiDDF__NodeDesc__YAnchor {
  DM_GUI_DDF__NODE_DESC__YANCHOR__YANCHOR_NONE = 0,
  DM_GUI_DDF__NODE_DESC__YANCHOR__YANCHOR_TOP = 1,
  DM_GUI_DDF__NODE_DESC__YANCHOR__YANCHOR_BOTTOM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__YANCHOR)
} DmGuiDDF__NodeDesc__YAnchor;
typedef enum _DmGuiDDF__NodeDesc__Pivot {
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_CENTER = 0,
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_N = 1,
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_NE = 2,
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_E = 3,
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_SE = 4,
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_S = 5,
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_SW = 6,
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_W = 7,
  DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_NW = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__PIVOT)
} DmGuiDDF__NodeDesc__Pivot;
typedef enum _DmGuiDDF__NodeDesc__AdjustMode {
  DM_GUI_DDF__NODE_DESC__ADJUST_MODE__ADJUST_MODE_FIT = 0,
  DM_GUI_DDF__NODE_DESC__ADJUST_MODE__ADJUST_MODE_ZOOM = 1,
  DM_GUI_DDF__NODE_DESC__ADJUST_MODE__ADJUST_MODE_STRETCH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__ADJUST_MODE)
} DmGuiDDF__NodeDesc__AdjustMode;
/*
 * NOTE: Enum values must correspond to the enum values in dmGui
 */
typedef enum _DmGuiDDF__NodeDesc__SizeMode {
  DM_GUI_DDF__NODE_DESC__SIZE_MODE__SIZE_MODE_MANUAL = 0,
  DM_GUI_DDF__NODE_DESC__SIZE_MODE__SIZE_MODE_AUTO = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__SIZE_MODE)
} DmGuiDDF__NodeDesc__SizeMode;
typedef enum _DmGuiDDF__NodeDesc__PieBounds {
  DM_GUI_DDF__NODE_DESC__PIE_BOUNDS__PIEBOUNDS_RECTANGLE = 0,
  DM_GUI_DDF__NODE_DESC__PIE_BOUNDS__PIEBOUNDS_ELLIPSE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__NODE_DESC__PIE_BOUNDS)
} DmGuiDDF__NodeDesc__PieBounds;
typedef enum _DmGuiDDF__SceneDesc__AdjustReference {
  DM_GUI_DDF__SCENE_DESC__ADJUST_REFERENCE__ADJUST_REFERENCE_LEGACY = 0,
  DM_GUI_DDF__SCENE_DESC__ADJUST_REFERENCE__ADJUST_REFERENCE_PARENT = 1,
  DM_GUI_DDF__SCENE_DESC__ADJUST_REFERENCE__ADJUST_REFERENCE_DISABLED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GUI_DDF__SCENE_DESC__ADJUST_REFERENCE)
} DmGuiDDF__SceneDesc__AdjustReference;

/* --- messages --- */

struct  DmGuiDDF__NodeDesc
{
  ProtobufCMessage base;
  DmMath__Vector4 *position;
  DmMath__Vector4 *rotation;
  DmMath__Vector4 *scale;
  DmMath__Vector4 *size;
  DmMath__Vector4 *color;
  protobuf_c_boolean has_type;
  DmGuiDDF__NodeDesc__Type type;
  protobuf_c_boolean has_blend_mode;
  DmGuiDDF__NodeDesc__BlendMode blend_mode;
  char *text;
  char *texture;
  char *font;
  char *id;
  protobuf_c_boolean has_xanchor;
  DmGuiDDF__NodeDesc__XAnchor xanchor;
  protobuf_c_boolean has_yanchor;
  DmGuiDDF__NodeDesc__YAnchor yanchor;
  protobuf_c_boolean has_pivot;
  DmGuiDDF__NodeDesc__Pivot pivot;
  DmMath__Vector4 *outline;
  DmMath__Vector4 *shadow;
  protobuf_c_boolean has_adjust_mode;
  DmGuiDDF__NodeDesc__AdjustMode adjust_mode;
  protobuf_c_boolean has_line_break;
  protobuf_c_boolean line_break;
  char *parent;
  char *layer;
  protobuf_c_boolean has_inherit_alpha;
  protobuf_c_boolean inherit_alpha;
  DmMath__Vector4 *slice9;
  /*
   * These are pie specific options
   */
  protobuf_c_boolean has_outerbounds;
  DmGuiDDF__NodeDesc__PieBounds outerbounds;
  protobuf_c_boolean has_innerradius;
  float innerradius;
  protobuf_c_boolean has_perimetervertices;
  int32_t perimetervertices;
  protobuf_c_boolean has_piefillangle;
  float piefillangle;
  protobuf_c_boolean has_clipping_mode;
  DmGuiDDF__NodeDesc__ClippingMode clipping_mode;
  protobuf_c_boolean has_clipping_visible;
  protobuf_c_boolean clipping_visible;
  protobuf_c_boolean has_clipping_inverted;
  protobuf_c_boolean clipping_inverted;
  protobuf_c_boolean has_alpha;
  float alpha;
  protobuf_c_boolean has_outline_alpha;
  float outline_alpha;
  protobuf_c_boolean has_shadow_alpha;
  float shadow_alpha;
  size_t n_overridden_fields;
  uint32_t *overridden_fields;
  char *template_;
  protobuf_c_boolean has_template_node_child;
  protobuf_c_boolean template_node_child;
  protobuf_c_boolean has_text_leading;
  float text_leading;
  protobuf_c_boolean has_text_tracking;
  float text_tracking;
  protobuf_c_boolean has_size_mode;
  DmGuiDDF__NodeDesc__SizeMode size_mode;
  /*
   * Spine specific options (deprecated)
   */
  char *spine_scene;
  char *spine_default_animation;
  char *spine_skin;
  protobuf_c_boolean has_spine_node_child;
  protobuf_c_boolean spine_node_child;
  /*
   * ParticleFX specific options
   */
  char *particlefx;
  /*
   * for custom types
   */
  protobuf_c_boolean has_custom_type;
  uint32_t custom_type;
  protobuf_c_boolean has_enabled;
  protobuf_c_boolean enabled;
  protobuf_c_boolean has_visible;
  protobuf_c_boolean visible;
};
#define DM_GUI_DDF__NODE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__node_desc__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0, DM_GUI_DDF__NODE_DESC__TYPE__TYPE_BOX, 0, DM_GUI_DDF__NODE_DESC__BLEND_MODE__BLEND_MODE_ALPHA, NULL, NULL, NULL, NULL, 0, DM_GUI_DDF__NODE_DESC__XANCHOR__XANCHOR_NONE, 0, DM_GUI_DDF__NODE_DESC__YANCHOR__YANCHOR_NONE, 0, DM_GUI_DDF__NODE_DESC__PIVOT__PIVOT_CENTER, NULL, NULL, 0, DM_GUI_DDF__NODE_DESC__ADJUST_MODE__ADJUST_MODE_FIT, 0, 0, NULL, NULL, 0, 0, NULL, 0, DM_GUI_DDF__NODE_DESC__PIE_BOUNDS__PIEBOUNDS_ELLIPSE, 0, 0, 0, 32, 0, 360, 0, DM_GUI_DDF__NODE_DESC__CLIPPING_MODE__CLIPPING_MODE_NONE, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0,NULL, NULL, 0, 0, 0, 1, 0, 0, 0, DM_GUI_DDF__NODE_DESC__SIZE_MODE__SIZE_MODE_MANUAL, NULL, NULL, NULL, 0, 0, NULL, 0, 0u, 0, 1, 0, 1 }


struct  DmGuiDDF__SceneDesc__FontDesc
{
  ProtobufCMessage base;
  char *name;
  char *font;
};
#define DM_GUI_DDF__SCENE_DESC__FONT_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__scene_desc__font_desc__descriptor) \
    , NULL, NULL }


struct  DmGuiDDF__SceneDesc__TextureDesc
{
  ProtobufCMessage base;
  char *name;
  char *texture;
};
#define DM_GUI_DDF__SCENE_DESC__TEXTURE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__scene_desc__texture_desc__descriptor) \
    , NULL, NULL }


struct  DmGuiDDF__SceneDesc__LayerDesc
{
  ProtobufCMessage base;
  char *name;
};
#define DM_GUI_DDF__SCENE_DESC__LAYER_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__scene_desc__layer_desc__descriptor) \
    , NULL }


struct  DmGuiDDF__SceneDesc__LayoutDesc
{
  ProtobufCMessage base;
  char *name;
  size_t n_nodes;
  DmGuiDDF__NodeDesc **nodes;
};
#define DM_GUI_DDF__SCENE_DESC__LAYOUT_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__scene_desc__layout_desc__descriptor) \
    , NULL, 0,NULL }


struct  DmGuiDDF__SceneDesc__SpineSceneDesc
{
  ProtobufCMessage base;
  char *name;
  char *spine_scene;
};
#define DM_GUI_DDF__SCENE_DESC__SPINE_SCENE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__scene_desc__spine_scene_desc__descriptor) \
    , NULL, NULL }


struct  DmGuiDDF__SceneDesc__ResourceDesc
{
  ProtobufCMessage base;
  char *name;
  char *path;
};
#define DM_GUI_DDF__SCENE_DESC__RESOURCE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__scene_desc__resource_desc__descriptor) \
    , NULL, NULL }


struct  DmGuiDDF__SceneDesc__ParticleFXDesc
{
  ProtobufCMessage base;
  char *name;
  char *particlefx;
};
#define DM_GUI_DDF__SCENE_DESC__PARTICLE_FXDESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__scene_desc__particle_fxdesc__descriptor) \
    , NULL, NULL }


struct  DmGuiDDF__SceneDesc
{
  ProtobufCMessage base;
  char *script;
  size_t n_fonts;
  DmGuiDDF__SceneDesc__FontDesc **fonts;
  size_t n_textures;
  DmGuiDDF__SceneDesc__TextureDesc **textures;
  DmMath__Vector4 *background_color;
  size_t n_nodes;
  DmGuiDDF__NodeDesc **nodes;
  size_t n_layers;
  DmGuiDDF__SceneDesc__LayerDesc **layers;
  char *material;
  size_t n_layouts;
  DmGuiDDF__SceneDesc__LayoutDesc **layouts;
  protobuf_c_boolean has_adjust_reference;
  DmGuiDDF__SceneDesc__AdjustReference adjust_reference;
  protobuf_c_boolean has_max_nodes;
  uint32_t max_nodes;
  size_t n_spine_scenes;
  DmGuiDDF__SceneDesc__SpineSceneDesc **spine_scenes;
  size_t n_particlefxs;
  DmGuiDDF__SceneDesc__ParticleFXDesc **particlefxs;
  size_t n_resources;
  DmGuiDDF__SceneDesc__ResourceDesc **resources;
};
extern char dm_gui_ddf__scene_desc__material__default_value[];
#define DM_GUI_DDF__SCENE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__scene_desc__descriptor) \
    , NULL, 0,NULL, 0,NULL, NULL, 0,NULL, 0,NULL, dm_gui_ddf__scene_desc__material__default_value, 0,NULL, 0, DM_GUI_DDF__SCENE_DESC__ADJUST_REFERENCE__ADJUST_REFERENCE_LEGACY, 0, 512u, 0,NULL, 0,NULL, 0,NULL }


/*
 *# reports a layout change
 * This message is broadcast to every GUI component when a layout change has been initiated
 * on device.
 * @message
 * @name layout_changed
 * @param id [type:hash] the id of the layout the engine is changing to
 * @param previous_id [type:hash] the id of the layout the engine is changing from
 * @examples
 * ```lua
 * function on_message(self, message_id, message, sender)
 *    if message_id == hash("layout_changed") and message.id == hash("Landscape") then
 *        -- switching layout to "Landscape"...
 *        ...
 *    end
 * end
 * ```
 */
struct  DmGuiDDF__LayoutChanged
{
  ProtobufCMessage base;
  uint64_t id;
  uint64_t previous_id;
};
#define DM_GUI_DDF__LAYOUT_CHANGED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_gui_ddf__layout_changed__descriptor) \
    , 0, 0 }


/* DmGuiDDF__NodeDesc methods */
void   dm_gui_ddf__node_desc__init
                     (DmGuiDDF__NodeDesc         *message);
size_t dm_gui_ddf__node_desc__get_packed_size
                     (const DmGuiDDF__NodeDesc   *message);
size_t dm_gui_ddf__node_desc__pack
                     (const DmGuiDDF__NodeDesc   *message,
                      uint8_t             *out);
size_t dm_gui_ddf__node_desc__pack_to_buffer
                     (const DmGuiDDF__NodeDesc   *message,
                      ProtobufCBuffer     *buffer);
DmGuiDDF__NodeDesc *
       dm_gui_ddf__node_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_gui_ddf__node_desc__free_unpacked
                     (DmGuiDDF__NodeDesc *message,
                      ProtobufCAllocator *allocator);
/* DmGuiDDF__SceneDesc__FontDesc methods */
void   dm_gui_ddf__scene_desc__font_desc__init
                     (DmGuiDDF__SceneDesc__FontDesc         *message);
/* DmGuiDDF__SceneDesc__TextureDesc methods */
void   dm_gui_ddf__scene_desc__texture_desc__init
                     (DmGuiDDF__SceneDesc__TextureDesc         *message);
/* DmGuiDDF__SceneDesc__LayerDesc methods */
void   dm_gui_ddf__scene_desc__layer_desc__init
                     (DmGuiDDF__SceneDesc__LayerDesc         *message);
/* DmGuiDDF__SceneDesc__LayoutDesc methods */
void   dm_gui_ddf__scene_desc__layout_desc__init
                     (DmGuiDDF__SceneDesc__LayoutDesc         *message);
/* DmGuiDDF__SceneDesc__SpineSceneDesc methods */
void   dm_gui_ddf__scene_desc__spine_scene_desc__init
                     (DmGuiDDF__SceneDesc__SpineSceneDesc         *message);
/* DmGuiDDF__SceneDesc__ResourceDesc methods */
void   dm_gui_ddf__scene_desc__resource_desc__init
                     (DmGuiDDF__SceneDesc__ResourceDesc         *message);
/* DmGuiDDF__SceneDesc__ParticleFXDesc methods */
void   dm_gui_ddf__scene_desc__particle_fxdesc__init
                     (DmGuiDDF__SceneDesc__ParticleFXDesc         *message);
/* DmGuiDDF__SceneDesc methods */
void   dm_gui_ddf__scene_desc__init
                     (DmGuiDDF__SceneDesc         *message);
size_t dm_gui_ddf__scene_desc__get_packed_size
                     (const DmGuiDDF__SceneDesc   *message);
size_t dm_gui_ddf__scene_desc__pack
                     (const DmGuiDDF__SceneDesc   *message,
                      uint8_t             *out);
size_t dm_gui_ddf__scene_desc__pack_to_buffer
                     (const DmGuiDDF__SceneDesc   *message,
                      ProtobufCBuffer     *buffer);
DmGuiDDF__SceneDesc *
       dm_gui_ddf__scene_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_gui_ddf__scene_desc__free_unpacked
                     (DmGuiDDF__SceneDesc *message,
                      ProtobufCAllocator *allocator);
/* DmGuiDDF__LayoutChanged methods */
void   dm_gui_ddf__layout_changed__init
                     (DmGuiDDF__LayoutChanged         *message);
size_t dm_gui_ddf__layout_changed__get_packed_size
                     (const DmGuiDDF__LayoutChanged   *message);
size_t dm_gui_ddf__layout_changed__pack
                     (const DmGuiDDF__LayoutChanged   *message,
                      uint8_t             *out);
size_t dm_gui_ddf__layout_changed__pack_to_buffer
                     (const DmGuiDDF__LayoutChanged   *message,
                      ProtobufCBuffer     *buffer);
DmGuiDDF__LayoutChanged *
       dm_gui_ddf__layout_changed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_gui_ddf__layout_changed__free_unpacked
                     (DmGuiDDF__LayoutChanged *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmGuiDDF__NodeDesc_Closure)
                 (const DmGuiDDF__NodeDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__SceneDesc__FontDesc_Closure)
                 (const DmGuiDDF__SceneDesc__FontDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__SceneDesc__TextureDesc_Closure)
                 (const DmGuiDDF__SceneDesc__TextureDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__SceneDesc__LayerDesc_Closure)
                 (const DmGuiDDF__SceneDesc__LayerDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__SceneDesc__LayoutDesc_Closure)
                 (const DmGuiDDF__SceneDesc__LayoutDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__SceneDesc__SpineSceneDesc_Closure)
                 (const DmGuiDDF__SceneDesc__SpineSceneDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__SceneDesc__ResourceDesc_Closure)
                 (const DmGuiDDF__SceneDesc__ResourceDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__SceneDesc__ParticleFXDesc_Closure)
                 (const DmGuiDDF__SceneDesc__ParticleFXDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__SceneDesc_Closure)
                 (const DmGuiDDF__SceneDesc *message,
                  void *closure_data);
typedef void (*DmGuiDDF__LayoutChanged_Closure)
                 (const DmGuiDDF__LayoutChanged *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dm_gui_ddf__node_desc__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__type__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__blend_mode__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__clipping_mode__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__xanchor__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__yanchor__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__pivot__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__adjust_mode__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__size_mode__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__node_desc__pie_bounds__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__scene_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__scene_desc__font_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__scene_desc__texture_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__scene_desc__layer_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__scene_desc__layout_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__scene_desc__spine_scene_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__scene_desc__resource_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__scene_desc__particle_fxdesc__descriptor;
extern const ProtobufCEnumDescriptor    dm_gui_ddf__scene_desc__adjust_reference__descriptor;
extern const ProtobufCMessageDescriptor dm_gui_ddf__layout_changed__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gamesys_2fgui_5fddf_2eproto__INCLUDED */
