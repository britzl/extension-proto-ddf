/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gamesys/sprite_ddf.proto */

#ifndef PROTOBUF_C_gamesys_2fsprite_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_gamesys_2fsprite_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"

typedef struct DmGameSystemDDF__SpriteDesc DmGameSystemDDF__SpriteDesc;
typedef struct DmGameSystemDDF__PlayAnimation DmGameSystemDDF__PlayAnimation;
typedef struct DmGameSystemDDF__AnimationDone DmGameSystemDDF__AnimationDone;
typedef struct DmGameSystemDDF__SetFlipHorizontal DmGameSystemDDF__SetFlipHorizontal;
typedef struct DmGameSystemDDF__SetFlipVertical DmGameSystemDDF__SetFlipVertical;


/* --- enums --- */

typedef enum _DmGameSystemDDF__SpriteDesc__BlendMode {
  DM_GAME_SYSTEM_DDF__SPRITE_DESC__BLEND_MODE__BLEND_MODE_ALPHA = 0,
  DM_GAME_SYSTEM_DDF__SPRITE_DESC__BLEND_MODE__BLEND_MODE_ADD = 1,
  DM_GAME_SYSTEM_DDF__SPRITE_DESC__BLEND_MODE__BLEND_MODE_ADD_ALPHA = 2,
  DM_GAME_SYSTEM_DDF__SPRITE_DESC__BLEND_MODE__BLEND_MODE_MULT = 3,
  DM_GAME_SYSTEM_DDF__SPRITE_DESC__BLEND_MODE__BLEND_MODE_SCREEN = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GAME_SYSTEM_DDF__SPRITE_DESC__BLEND_MODE)
} DmGameSystemDDF__SpriteDesc__BlendMode;
typedef enum _DmGameSystemDDF__SpriteDesc__SizeMode {
  DM_GAME_SYSTEM_DDF__SPRITE_DESC__SIZE_MODE__SIZE_MODE_MANUAL = 0,
  DM_GAME_SYSTEM_DDF__SPRITE_DESC__SIZE_MODE__SIZE_MODE_AUTO = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GAME_SYSTEM_DDF__SPRITE_DESC__SIZE_MODE)
} DmGameSystemDDF__SpriteDesc__SizeMode;

/* --- messages --- */

struct  DmGameSystemDDF__SpriteDesc
{
  ProtobufCMessage base;
  char *tile_set;
  char *default_animation;
  char *material;
  protobuf_c_boolean has_blend_mode;
  DmGameSystemDDF__SpriteDesc__BlendMode blend_mode;
  DmMath__Vector4 *slice9;
  DmMath__Vector4 *size;
  protobuf_c_boolean has_size_mode;
  DmGameSystemDDF__SpriteDesc__SizeMode size_mode;
};
extern char dm_game_system_ddf__sprite_desc__material__default_value[];
#define DM_GAME_SYSTEM_DDF__SPRITE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__sprite_desc__descriptor) \
    , NULL, NULL, dm_game_system_ddf__sprite_desc__material__default_value, 0, DM_GAME_SYSTEM_DDF__SPRITE_DESC__BLEND_MODE__BLEND_MODE_ALPHA, NULL, NULL, 0, DM_GAME_SYSTEM_DDF__SPRITE_DESC__SIZE_MODE__SIZE_MODE_AUTO }


/*
 *# play a sprite animation
 * Post this message to a sprite component to make it play an animation from its tile set.
 * @message
 * @name play_animation
 * @param id [type:hash] the id of the animation to play
 * @examples
 * In the example, it is assumed that the instance of the script has a sprite-component with id "sprite". The sprite itself is assumed to be bound to a tile set with animations "walk" and "jump".
 * ```lua
 * msg.post("#sprite", "play_animation", {id = hash("jump")})
 * ```
 */
struct  DmGameSystemDDF__PlayAnimation
{
  ProtobufCMessage base;
  uint64_t id;
  protobuf_c_boolean has_offset;
  float offset;
  protobuf_c_boolean has_playback_rate;
  float playback_rate;
};
#define DM_GAME_SYSTEM_DDF__PLAY_ANIMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__play_animation__descriptor) \
    , 0, 0, 0, 0, 1 }


/*
 *# reports that an animation has completed
 * This message is sent to the sender of a <code>play_animation</code> message when the
 * animation has completed.
 * Note that this message is sent only for animations that play with the following
 * playback modes:
 * - Once Forward
 * - Once Backward
 * - Once Ping Pong
 * See [ref:play_animation] for more information and examples of how to use
 * this message.
 * @message
 * @name animation_done
 * @param current_tile [type:number] the current tile of the sprite
 * @param id [type:hash] id of the animation that was completed
 * @examples
 * How to sequence two animations together.
 * ```lua
 * function init(self)
 *   -- play jump animation at init
 *   msg.post("#sprite", "play_animation", {id = hash("jump")})
 * end
 * function on_message(self, message_id, message, sender)
 *   -- check for animation done response
 *   if message_id == hash("animation_done") then
 *     -- start the walk animation
 *     msg.post("#sprite", "play_animation", { id = hash("walk") })
 *   end
 * end
 * ```
 */
struct  DmGameSystemDDF__AnimationDone
{
  ProtobufCMessage base;
  uint32_t current_tile;
  uint64_t id;
};
#define DM_GAME_SYSTEM_DDF__ANIMATION_DONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__animation_done__descriptor) \
    , 0, 0 }


/*
 * Function wrapper documented in gamesys_script.cpp 
 */
struct  DmGameSystemDDF__SetFlipHorizontal
{
  ProtobufCMessage base;
  uint32_t flip;
};
#define DM_GAME_SYSTEM_DDF__SET_FLIP_HORIZONTAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__set_flip_horizontal__descriptor) \
    , 0 }


/*
 * Function wrapper documented in gamesys_script.cpp 
 */
struct  DmGameSystemDDF__SetFlipVertical
{
  ProtobufCMessage base;
  uint32_t flip;
};
#define DM_GAME_SYSTEM_DDF__SET_FLIP_VERTICAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__set_flip_vertical__descriptor) \
    , 0 }


/* DmGameSystemDDF__SpriteDesc methods */
void   dm_game_system_ddf__sprite_desc__init
                     (DmGameSystemDDF__SpriteDesc         *message);
size_t dm_game_system_ddf__sprite_desc__get_packed_size
                     (const DmGameSystemDDF__SpriteDesc   *message);
size_t dm_game_system_ddf__sprite_desc__pack
                     (const DmGameSystemDDF__SpriteDesc   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__sprite_desc__pack_to_buffer
                     (const DmGameSystemDDF__SpriteDesc   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__SpriteDesc *
       dm_game_system_ddf__sprite_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__sprite_desc__free_unpacked
                     (DmGameSystemDDF__SpriteDesc *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__PlayAnimation methods */
void   dm_game_system_ddf__play_animation__init
                     (DmGameSystemDDF__PlayAnimation         *message);
size_t dm_game_system_ddf__play_animation__get_packed_size
                     (const DmGameSystemDDF__PlayAnimation   *message);
size_t dm_game_system_ddf__play_animation__pack
                     (const DmGameSystemDDF__PlayAnimation   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__play_animation__pack_to_buffer
                     (const DmGameSystemDDF__PlayAnimation   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__PlayAnimation *
       dm_game_system_ddf__play_animation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__play_animation__free_unpacked
                     (DmGameSystemDDF__PlayAnimation *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__AnimationDone methods */
void   dm_game_system_ddf__animation_done__init
                     (DmGameSystemDDF__AnimationDone         *message);
size_t dm_game_system_ddf__animation_done__get_packed_size
                     (const DmGameSystemDDF__AnimationDone   *message);
size_t dm_game_system_ddf__animation_done__pack
                     (const DmGameSystemDDF__AnimationDone   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__animation_done__pack_to_buffer
                     (const DmGameSystemDDF__AnimationDone   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__AnimationDone *
       dm_game_system_ddf__animation_done__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__animation_done__free_unpacked
                     (DmGameSystemDDF__AnimationDone *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__SetFlipHorizontal methods */
void   dm_game_system_ddf__set_flip_horizontal__init
                     (DmGameSystemDDF__SetFlipHorizontal         *message);
size_t dm_game_system_ddf__set_flip_horizontal__get_packed_size
                     (const DmGameSystemDDF__SetFlipHorizontal   *message);
size_t dm_game_system_ddf__set_flip_horizontal__pack
                     (const DmGameSystemDDF__SetFlipHorizontal   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__set_flip_horizontal__pack_to_buffer
                     (const DmGameSystemDDF__SetFlipHorizontal   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__SetFlipHorizontal *
       dm_game_system_ddf__set_flip_horizontal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__set_flip_horizontal__free_unpacked
                     (DmGameSystemDDF__SetFlipHorizontal *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__SetFlipVertical methods */
void   dm_game_system_ddf__set_flip_vertical__init
                     (DmGameSystemDDF__SetFlipVertical         *message);
size_t dm_game_system_ddf__set_flip_vertical__get_packed_size
                     (const DmGameSystemDDF__SetFlipVertical   *message);
size_t dm_game_system_ddf__set_flip_vertical__pack
                     (const DmGameSystemDDF__SetFlipVertical   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__set_flip_vertical__pack_to_buffer
                     (const DmGameSystemDDF__SetFlipVertical   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__SetFlipVertical *
       dm_game_system_ddf__set_flip_vertical__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__set_flip_vertical__free_unpacked
                     (DmGameSystemDDF__SetFlipVertical *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmGameSystemDDF__SpriteDesc_Closure)
                 (const DmGameSystemDDF__SpriteDesc *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__PlayAnimation_Closure)
                 (const DmGameSystemDDF__PlayAnimation *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__AnimationDone_Closure)
                 (const DmGameSystemDDF__AnimationDone *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__SetFlipHorizontal_Closure)
                 (const DmGameSystemDDF__SetFlipHorizontal *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__SetFlipVertical_Closure)
                 (const DmGameSystemDDF__SetFlipVertical *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dm_game_system_ddf__sprite_desc__descriptor;
extern const ProtobufCEnumDescriptor    dm_game_system_ddf__sprite_desc__blend_mode__descriptor;
extern const ProtobufCEnumDescriptor    dm_game_system_ddf__sprite_desc__size_mode__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__play_animation__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__animation_done__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__set_flip_horizontal__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__set_flip_vertical__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gamesys_2fsprite_5fddf_2eproto__INCLUDED */
