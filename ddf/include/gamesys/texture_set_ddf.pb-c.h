/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gamesys/texture_set_ddf.proto */

#ifndef PROTOBUF_C_gamesys_2ftexture_5fset_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_gamesys_2ftexture_5fset_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"
#include "gamesys/tile_ddf.pb-c.h"

typedef struct DmGameSystemDDF__TextureSetAnimation DmGameSystemDDF__TextureSetAnimation;
typedef struct DmGameSystemDDF__SpriteGeometry DmGameSystemDDF__SpriteGeometry;
typedef struct DmGameSystemDDF__TextureSet DmGameSystemDDF__TextureSet;


/* --- enums --- */


/* --- messages --- */

struct  DmGameSystemDDF__TextureSetAnimation
{
  ProtobufCMessage base;
  char *id;
  uint32_t width;
  uint32_t height;
  uint32_t start;
  uint32_t end;
  protobuf_c_boolean has_fps;
  uint32_t fps;
  protobuf_c_boolean has_playback;
  DmGameSystemDDF__Playback playback;
  protobuf_c_boolean has_flip_horizontal;
  uint32_t flip_horizontal;
  protobuf_c_boolean has_flip_vertical;
  uint32_t flip_vertical;
  /*
   * Deprecated
   */
  protobuf_c_boolean has_is_animation;
  uint32_t is_animation;
};
#define DM_GAME_SYSTEM_DDF__TEXTURE_SET_ANIMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__texture_set_animation__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 30u, 0, DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_ONCE_FORWARD, 0, 0u, 0, 0u, 0, 0u }


/*
 * * Vertices are relative to the center of the sprite
 * * Polygon may be concave
 * * Indices for a triangle list (i.e. 3 indices per triangle)
 */
struct  DmGameSystemDDF__SpriteGeometry
{
  ProtobufCMessage base;
  /*
   * The width and height of the image this geometry was generated from
   */
  uint32_t width;
  uint32_t height;
  /*
   * A list of 2-tuples, each making up a point in a hull: [p0.x, p0.y, p1.x, p1.y, ... pN.x, pN.y] where N is (convex_hull_size-1)
   * Each point is relative to the sprite center
   */
  size_t n_vertices;
  float *vertices;
  /*
   * A list of 2-tuples, corresponding directly to the vertices
   */
  size_t n_uvs;
  float *uvs;
  /*
   * list of 3-tuples, each defining a triangle in the vertex/uv list
   */
  size_t n_indices;
  uint32_t *indices;
};
#define DM_GAME_SYSTEM_DDF__SPRITE_GEOMETRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__sprite_geometry__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0,NULL }


struct  DmGameSystemDDF__TextureSet
{
  ProtobufCMessage base;
  char *texture;
  size_t n_animations;
  DmGameSystemDDF__TextureSetAnimation **animations;
  size_t n_convex_hulls;
  DmGameSystemDDF__ConvexHull **convex_hulls;
  /*
   * Only used when the source is a tile-source
   * tile_width and tile_height should only be used in tilemap
   */
  protobuf_c_boolean has_tile_width;
  uint32_t tile_width;
  protobuf_c_boolean has_tile_height;
  uint32_t tile_height;
  /*
   * This is the number of rects stored before the animation frames (atlas and tile source)
   */
  protobuf_c_boolean has_tile_count;
  uint32_t tile_count;
  size_t n_collision_hull_points;
  float *collision_hull_points;
  size_t n_collision_groups;
  char **collision_groups;
  /*
   * A series of four float pairs of UV coords, representing quad texture coordinates and
   * allowing for rotation on texture atlases.
   * For unrotated quads, the order is: [(minU,maxV),(minU,minV),(maxU,minV),(maxU,maxV)]
   * For rotated quads, the order is: [(minU,minV),(maxU,minV),(maxU,maxV),(minU,maxV)]
   * (See TextureSetGenerator.java)
   * Only used in the editor now.
   */
  ProtobufCBinaryData tex_coords;
  /*
   * A series of two float pairs of dimensions representing quad texture width and height in texels.
   */
  protobuf_c_boolean has_tex_dims;
  ProtobufCBinaryData tex_dims;
  /*
   * One geometry struct per image
   */
  size_t n_geometries;
  DmGameSystemDDF__SpriteGeometry **geometries;
  /*
   * If false, uses the legacy code path
   */
  protobuf_c_boolean has_use_geometries;
  uint32_t use_geometries;
  /*
   * Maps animation frames to geometry index
   */
  size_t n_frame_indices;
  uint32_t *frame_indices;
};
#define DM_GAME_SYSTEM_DDF__TEXTURE_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__texture_set__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, {0,NULL}, 0, {0,NULL}, 0,NULL, 0, 0, 0,NULL }


/* DmGameSystemDDF__TextureSetAnimation methods */
void   dm_game_system_ddf__texture_set_animation__init
                     (DmGameSystemDDF__TextureSetAnimation         *message);
size_t dm_game_system_ddf__texture_set_animation__get_packed_size
                     (const DmGameSystemDDF__TextureSetAnimation   *message);
size_t dm_game_system_ddf__texture_set_animation__pack
                     (const DmGameSystemDDF__TextureSetAnimation   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__texture_set_animation__pack_to_buffer
                     (const DmGameSystemDDF__TextureSetAnimation   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__TextureSetAnimation *
       dm_game_system_ddf__texture_set_animation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__texture_set_animation__free_unpacked
                     (DmGameSystemDDF__TextureSetAnimation *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__SpriteGeometry methods */
void   dm_game_system_ddf__sprite_geometry__init
                     (DmGameSystemDDF__SpriteGeometry         *message);
size_t dm_game_system_ddf__sprite_geometry__get_packed_size
                     (const DmGameSystemDDF__SpriteGeometry   *message);
size_t dm_game_system_ddf__sprite_geometry__pack
                     (const DmGameSystemDDF__SpriteGeometry   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__sprite_geometry__pack_to_buffer
                     (const DmGameSystemDDF__SpriteGeometry   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__SpriteGeometry *
       dm_game_system_ddf__sprite_geometry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__sprite_geometry__free_unpacked
                     (DmGameSystemDDF__SpriteGeometry *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__TextureSet methods */
void   dm_game_system_ddf__texture_set__init
                     (DmGameSystemDDF__TextureSet         *message);
size_t dm_game_system_ddf__texture_set__get_packed_size
                     (const DmGameSystemDDF__TextureSet   *message);
size_t dm_game_system_ddf__texture_set__pack
                     (const DmGameSystemDDF__TextureSet   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__texture_set__pack_to_buffer
                     (const DmGameSystemDDF__TextureSet   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__TextureSet *
       dm_game_system_ddf__texture_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__texture_set__free_unpacked
                     (DmGameSystemDDF__TextureSet *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmGameSystemDDF__TextureSetAnimation_Closure)
                 (const DmGameSystemDDF__TextureSetAnimation *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__SpriteGeometry_Closure)
                 (const DmGameSystemDDF__SpriteGeometry *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__TextureSet_Closure)
                 (const DmGameSystemDDF__TextureSet *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dm_game_system_ddf__texture_set_animation__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__sprite_geometry__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__texture_set__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gamesys_2ftexture_5fset_5fddf_2eproto__INCLUDED */
