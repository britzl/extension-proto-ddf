/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gamesys/tile_ddf.proto */

#ifndef PROTOBUF_C_gamesys_2ftile_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_gamesys_2ftile_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"

typedef struct DmGameSystemDDF__ConvexHull DmGameSystemDDF__ConvexHull;
typedef struct DmGameSystemDDF__Cue DmGameSystemDDF__Cue;
typedef struct DmGameSystemDDF__Animation DmGameSystemDDF__Animation;
typedef struct DmGameSystemDDF__TileSet DmGameSystemDDF__TileSet;
typedef struct DmGameSystemDDF__TileCell DmGameSystemDDF__TileCell;
typedef struct DmGameSystemDDF__TileLayer DmGameSystemDDF__TileLayer;
typedef struct DmGameSystemDDF__TileGrid DmGameSystemDDF__TileGrid;
typedef struct DmGameSystemDDF__SetTile DmGameSystemDDF__SetTile;
typedef struct DmGameSystemDDF__SetConstantTileMap DmGameSystemDDF__SetConstantTileMap;
typedef struct DmGameSystemDDF__ResetConstantTileMap DmGameSystemDDF__ResetConstantTileMap;


/* --- enums --- */

typedef enum _DmGameSystemDDF__TileGrid__BlendMode {
  DM_GAME_SYSTEM_DDF__TILE_GRID__BLEND_MODE__BLEND_MODE_ALPHA = 0,
  DM_GAME_SYSTEM_DDF__TILE_GRID__BLEND_MODE__BLEND_MODE_ADD = 1,
  DM_GAME_SYSTEM_DDF__TILE_GRID__BLEND_MODE__BLEND_MODE_ADD_ALPHA = 2,
  DM_GAME_SYSTEM_DDF__TILE_GRID__BLEND_MODE__BLEND_MODE_MULT = 3,
  DM_GAME_SYSTEM_DDF__TILE_GRID__BLEND_MODE__BLEND_MODE_SCREEN = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GAME_SYSTEM_DDF__TILE_GRID__BLEND_MODE)
} DmGameSystemDDF__TileGrid__BlendMode;
typedef enum _DmGameSystemDDF__Playback {
  DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_NONE = 0,
  DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_ONCE_FORWARD = 1,
  DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_ONCE_BACKWARD = 2,
  DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_ONCE_PINGPONG = 6,
  DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_LOOP_FORWARD = 3,
  DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_LOOP_BACKWARD = 4,
  DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_LOOP_PINGPONG = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GAME_SYSTEM_DDF__PLAYBACK)
} DmGameSystemDDF__Playback;
typedef enum _DmGameSystemDDF__SpriteTrimmingMode {
  DM_GAME_SYSTEM_DDF__SPRITE_TRIMMING_MODE__SPRITE_TRIM_MODE_OFF = 0,
  DM_GAME_SYSTEM_DDF__SPRITE_TRIMMING_MODE__SPRITE_TRIM_MODE_4 = 4,
  DM_GAME_SYSTEM_DDF__SPRITE_TRIMMING_MODE__SPRITE_TRIM_MODE_5 = 5,
  DM_GAME_SYSTEM_DDF__SPRITE_TRIMMING_MODE__SPRITE_TRIM_MODE_6 = 6,
  DM_GAME_SYSTEM_DDF__SPRITE_TRIMMING_MODE__SPRITE_TRIM_MODE_7 = 7,
  DM_GAME_SYSTEM_DDF__SPRITE_TRIMMING_MODE__SPRITE_TRIM_MODE_8 = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GAME_SYSTEM_DDF__SPRITE_TRIMMING_MODE)
} DmGameSystemDDF__SpriteTrimmingMode;

/* --- messages --- */

struct  DmGameSystemDDF__ConvexHull
{
  ProtobufCMessage base;
  /*
   * index into an array of points (x0, y0, x1, y1, ...)
   * in “points” unit, ie effectively divided by 2
   */
  uint32_t index;
  uint32_t count;
  char *collision_group;
};
extern char dm_game_system_ddf__convex_hull__collision_group__default_value[];
#define DM_GAME_SYSTEM_DDF__CONVEX_HULL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__convex_hull__descriptor) \
    , 0u, 0u, dm_game_system_ddf__convex_hull__collision_group__default_value }


struct  DmGameSystemDDF__Cue
{
  ProtobufCMessage base;
  char *id;
  uint32_t frame;
  protobuf_c_boolean has_value;
  float value;
};
#define DM_GAME_SYSTEM_DDF__CUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__cue__descriptor) \
    , NULL, 0, 0, 0 }


struct  DmGameSystemDDF__Animation
{
  ProtobufCMessage base;
  char *id;
  uint32_t start_tile;
  uint32_t end_tile;
  protobuf_c_boolean has_playback;
  DmGameSystemDDF__Playback playback;
  protobuf_c_boolean has_fps;
  uint32_t fps;
  protobuf_c_boolean has_flip_horizontal;
  uint32_t flip_horizontal;
  protobuf_c_boolean has_flip_vertical;
  uint32_t flip_vertical;
  size_t n_cues;
  DmGameSystemDDF__Cue **cues;
};
#define DM_GAME_SYSTEM_DDF__ANIMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__animation__descriptor) \
    , NULL, 0, 0, 0, DM_GAME_SYSTEM_DDF__PLAYBACK__PLAYBACK_ONCE_FORWARD, 0, 30u, 0, 0u, 0, 0u, 0,NULL }


struct  DmGameSystemDDF__TileSet
{
  ProtobufCMessage base;
  char *image;
  uint32_t tile_width;
  uint32_t tile_height;
  uint32_t tile_margin;
  uint32_t tile_spacing;
  char *collision;
  char *material_tag;
  size_t n_convex_hulls;
  DmGameSystemDDF__ConvexHull **convex_hulls;
  size_t n_convex_hull_points;
  float *convex_hull_points;
  size_t n_collision_groups;
  char **collision_groups;
  size_t n_animations;
  DmGameSystemDDF__Animation **animations;
  protobuf_c_boolean has_extrude_borders;
  uint32_t extrude_borders;
  protobuf_c_boolean has_inner_padding;
  uint32_t inner_padding;
  protobuf_c_boolean has_sprite_trim_mode;
  DmGameSystemDDF__SpriteTrimmingMode sprite_trim_mode;
};
extern char dm_game_system_ddf__tile_set__material_tag__default_value[];
#define DM_GAME_SYSTEM_DDF__TILE_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__tile_set__descriptor) \
    , NULL, 0u, 0u, 0u, 0u, NULL, dm_game_system_ddf__tile_set__material_tag__default_value, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0u, 0, 0u, 0, DM_GAME_SYSTEM_DDF__SPRITE_TRIMMING_MODE__SPRITE_TRIM_MODE_OFF }


struct  DmGameSystemDDF__TileCell
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  uint32_t tile;
  protobuf_c_boolean has_h_flip;
  uint32_t h_flip;
  protobuf_c_boolean has_v_flip;
  uint32_t v_flip;
  protobuf_c_boolean has_rotate90;
  uint32_t rotate90;
};
#define DM_GAME_SYSTEM_DDF__TILE_CELL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__tile_cell__descriptor) \
    , 0, 0, 0u, 0, 0u, 0, 0u, 0, 0u }


struct  DmGameSystemDDF__TileLayer
{
  ProtobufCMessage base;
  char *id;
  float z;
  uint32_t is_visible;
  protobuf_c_boolean has_id_hash;
  uint64_t id_hash;
  size_t n_cell;
  DmGameSystemDDF__TileCell **cell;
};
extern char dm_game_system_ddf__tile_layer__id__default_value[];
#define DM_GAME_SYSTEM_DDF__TILE_LAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__tile_layer__descriptor) \
    , dm_game_system_ddf__tile_layer__id__default_value, 0, 1u, 0, 0ull, 0,NULL }


struct  DmGameSystemDDF__TileGrid
{
  ProtobufCMessage base;
  char *tile_set;
  size_t n_layers;
  DmGameSystemDDF__TileLayer **layers;
  char *material;
  protobuf_c_boolean has_blend_mode;
  DmGameSystemDDF__TileGrid__BlendMode blend_mode;
};
extern char dm_game_system_ddf__tile_grid__material__default_value[];
#define DM_GAME_SYSTEM_DDF__TILE_GRID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__tile_grid__descriptor) \
    , NULL, 0,NULL, dm_game_system_ddf__tile_grid__material__default_value, 0, DM_GAME_SYSTEM_DDF__TILE_GRID__BLEND_MODE__BLEND_MODE_ALPHA }


/*
 * (DEPRECATED and removed from docs) changes a tile in a tile map
 * Send this message to a tile map component to change the tile in one of its cells.
 * @deprecated Use <code>tilemap.set_tile()</code> instead.
 * @examples
 * <p>
 * This example demonstrates how to clear the tile above the instance when it collides with that tile from underneath,
 * i.e. the same thing that would happen in Super Mario Bros.
 * </p>
 * <p>
 * Assuming the instance we collide with has a tile map component with id "tilemap", which has a layer with id "layer1":
 * </p>
 * <pre>
 * function on_message(self, message_id, message, sender)
 *     if message_id == hash("contact_point_response") then
 *         -- check if the normal points down-wards
 *         if message.normal.y < -0.5 then
 *             msg.post(msg.url(nil, message.other_id, "tilemap"), "set_tile", {layer_id = hash("layer1"), position = go.get_position(), dy = 1})
 *         end
 *     end
 * end
 * </pre>
 * @message
 * @name set_tile
 * @param layer_id id of the layer for which to change a tile
 * @param position the position of the cell for which to change the tile (world space)
 * @param tile index of the tile to change to in the tile set, 1 for the first tile and 0 to clear the tile (0 by default)
 * @param dx horizontal offset from the supplied position to the requested cell (grid space, 0 by default)
 * @param dy vertical offset from the supplied position to the requested cell (grid space, 0 by default)
 */
struct  DmGameSystemDDF__SetTile
{
  ProtobufCMessage base;
  uint64_t layer_id;
  DmMath__Point3 *position;
  protobuf_c_boolean has_tile;
  uint32_t tile;
  protobuf_c_boolean has_dx;
  uint32_t dx;
  protobuf_c_boolean has_dy;
  uint32_t dy;
};
#define DM_GAME_SYSTEM_DDF__SET_TILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__set_tile__descriptor) \
    , 0, NULL, 0, 0u, 0, 0u, 0, 0u }


/*
 * Function wrapper documented in script_tilemap.cpp 
 */
struct  DmGameSystemDDF__SetConstantTileMap
{
  ProtobufCMessage base;
  uint64_t name_hash;
  DmMath__Vector4 *value;
};
#define DM_GAME_SYSTEM_DDF__SET_CONSTANT_TILE_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__set_constant_tile_map__descriptor) \
    , 0, NULL }


/*
 * Function wrapper documented in script_tilemap.cpp 
 */
struct  DmGameSystemDDF__ResetConstantTileMap
{
  ProtobufCMessage base;
  uint64_t name_hash;
};
#define DM_GAME_SYSTEM_DDF__RESET_CONSTANT_TILE_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_game_system_ddf__reset_constant_tile_map__descriptor) \
    , 0 }


/* DmGameSystemDDF__ConvexHull methods */
void   dm_game_system_ddf__convex_hull__init
                     (DmGameSystemDDF__ConvexHull         *message);
size_t dm_game_system_ddf__convex_hull__get_packed_size
                     (const DmGameSystemDDF__ConvexHull   *message);
size_t dm_game_system_ddf__convex_hull__pack
                     (const DmGameSystemDDF__ConvexHull   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__convex_hull__pack_to_buffer
                     (const DmGameSystemDDF__ConvexHull   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__ConvexHull *
       dm_game_system_ddf__convex_hull__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__convex_hull__free_unpacked
                     (DmGameSystemDDF__ConvexHull *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__Cue methods */
void   dm_game_system_ddf__cue__init
                     (DmGameSystemDDF__Cue         *message);
size_t dm_game_system_ddf__cue__get_packed_size
                     (const DmGameSystemDDF__Cue   *message);
size_t dm_game_system_ddf__cue__pack
                     (const DmGameSystemDDF__Cue   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__cue__pack_to_buffer
                     (const DmGameSystemDDF__Cue   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__Cue *
       dm_game_system_ddf__cue__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__cue__free_unpacked
                     (DmGameSystemDDF__Cue *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__Animation methods */
void   dm_game_system_ddf__animation__init
                     (DmGameSystemDDF__Animation         *message);
size_t dm_game_system_ddf__animation__get_packed_size
                     (const DmGameSystemDDF__Animation   *message);
size_t dm_game_system_ddf__animation__pack
                     (const DmGameSystemDDF__Animation   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__animation__pack_to_buffer
                     (const DmGameSystemDDF__Animation   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__Animation *
       dm_game_system_ddf__animation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__animation__free_unpacked
                     (DmGameSystemDDF__Animation *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__TileSet methods */
void   dm_game_system_ddf__tile_set__init
                     (DmGameSystemDDF__TileSet         *message);
size_t dm_game_system_ddf__tile_set__get_packed_size
                     (const DmGameSystemDDF__TileSet   *message);
size_t dm_game_system_ddf__tile_set__pack
                     (const DmGameSystemDDF__TileSet   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__tile_set__pack_to_buffer
                     (const DmGameSystemDDF__TileSet   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__TileSet *
       dm_game_system_ddf__tile_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__tile_set__free_unpacked
                     (DmGameSystemDDF__TileSet *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__TileCell methods */
void   dm_game_system_ddf__tile_cell__init
                     (DmGameSystemDDF__TileCell         *message);
size_t dm_game_system_ddf__tile_cell__get_packed_size
                     (const DmGameSystemDDF__TileCell   *message);
size_t dm_game_system_ddf__tile_cell__pack
                     (const DmGameSystemDDF__TileCell   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__tile_cell__pack_to_buffer
                     (const DmGameSystemDDF__TileCell   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__TileCell *
       dm_game_system_ddf__tile_cell__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__tile_cell__free_unpacked
                     (DmGameSystemDDF__TileCell *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__TileLayer methods */
void   dm_game_system_ddf__tile_layer__init
                     (DmGameSystemDDF__TileLayer         *message);
size_t dm_game_system_ddf__tile_layer__get_packed_size
                     (const DmGameSystemDDF__TileLayer   *message);
size_t dm_game_system_ddf__tile_layer__pack
                     (const DmGameSystemDDF__TileLayer   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__tile_layer__pack_to_buffer
                     (const DmGameSystemDDF__TileLayer   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__TileLayer *
       dm_game_system_ddf__tile_layer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__tile_layer__free_unpacked
                     (DmGameSystemDDF__TileLayer *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__TileGrid methods */
void   dm_game_system_ddf__tile_grid__init
                     (DmGameSystemDDF__TileGrid         *message);
size_t dm_game_system_ddf__tile_grid__get_packed_size
                     (const DmGameSystemDDF__TileGrid   *message);
size_t dm_game_system_ddf__tile_grid__pack
                     (const DmGameSystemDDF__TileGrid   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__tile_grid__pack_to_buffer
                     (const DmGameSystemDDF__TileGrid   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__TileGrid *
       dm_game_system_ddf__tile_grid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__tile_grid__free_unpacked
                     (DmGameSystemDDF__TileGrid *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__SetTile methods */
void   dm_game_system_ddf__set_tile__init
                     (DmGameSystemDDF__SetTile         *message);
size_t dm_game_system_ddf__set_tile__get_packed_size
                     (const DmGameSystemDDF__SetTile   *message);
size_t dm_game_system_ddf__set_tile__pack
                     (const DmGameSystemDDF__SetTile   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__set_tile__pack_to_buffer
                     (const DmGameSystemDDF__SetTile   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__SetTile *
       dm_game_system_ddf__set_tile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__set_tile__free_unpacked
                     (DmGameSystemDDF__SetTile *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__SetConstantTileMap methods */
void   dm_game_system_ddf__set_constant_tile_map__init
                     (DmGameSystemDDF__SetConstantTileMap         *message);
size_t dm_game_system_ddf__set_constant_tile_map__get_packed_size
                     (const DmGameSystemDDF__SetConstantTileMap   *message);
size_t dm_game_system_ddf__set_constant_tile_map__pack
                     (const DmGameSystemDDF__SetConstantTileMap   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__set_constant_tile_map__pack_to_buffer
                     (const DmGameSystemDDF__SetConstantTileMap   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__SetConstantTileMap *
       dm_game_system_ddf__set_constant_tile_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__set_constant_tile_map__free_unpacked
                     (DmGameSystemDDF__SetConstantTileMap *message,
                      ProtobufCAllocator *allocator);
/* DmGameSystemDDF__ResetConstantTileMap methods */
void   dm_game_system_ddf__reset_constant_tile_map__init
                     (DmGameSystemDDF__ResetConstantTileMap         *message);
size_t dm_game_system_ddf__reset_constant_tile_map__get_packed_size
                     (const DmGameSystemDDF__ResetConstantTileMap   *message);
size_t dm_game_system_ddf__reset_constant_tile_map__pack
                     (const DmGameSystemDDF__ResetConstantTileMap   *message,
                      uint8_t             *out);
size_t dm_game_system_ddf__reset_constant_tile_map__pack_to_buffer
                     (const DmGameSystemDDF__ResetConstantTileMap   *message,
                      ProtobufCBuffer     *buffer);
DmGameSystemDDF__ResetConstantTileMap *
       dm_game_system_ddf__reset_constant_tile_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_game_system_ddf__reset_constant_tile_map__free_unpacked
                     (DmGameSystemDDF__ResetConstantTileMap *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmGameSystemDDF__ConvexHull_Closure)
                 (const DmGameSystemDDF__ConvexHull *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__Cue_Closure)
                 (const DmGameSystemDDF__Cue *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__Animation_Closure)
                 (const DmGameSystemDDF__Animation *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__TileSet_Closure)
                 (const DmGameSystemDDF__TileSet *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__TileCell_Closure)
                 (const DmGameSystemDDF__TileCell *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__TileLayer_Closure)
                 (const DmGameSystemDDF__TileLayer *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__TileGrid_Closure)
                 (const DmGameSystemDDF__TileGrid *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__SetTile_Closure)
                 (const DmGameSystemDDF__SetTile *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__SetConstantTileMap_Closure)
                 (const DmGameSystemDDF__SetConstantTileMap *message,
                  void *closure_data);
typedef void (*DmGameSystemDDF__ResetConstantTileMap_Closure)
                 (const DmGameSystemDDF__ResetConstantTileMap *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    dm_game_system_ddf__playback__descriptor;
extern const ProtobufCEnumDescriptor    dm_game_system_ddf__sprite_trimming_mode__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__convex_hull__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__cue__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__animation__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__tile_set__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__tile_cell__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__tile_layer__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__tile_grid__descriptor;
extern const ProtobufCEnumDescriptor    dm_game_system_ddf__tile_grid__blend_mode__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__set_tile__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__set_constant_tile_map__descriptor;
extern const ProtobufCMessageDescriptor dm_game_system_ddf__reset_constant_tile_map__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gamesys_2ftile_5fddf_2eproto__INCLUDED */
