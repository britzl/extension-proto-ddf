/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gamesys/buffer_ddf.proto */

#ifndef PROTOBUF_C_gamesys_2fbuffer_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_gamesys_2fbuffer_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"

typedef struct DmBufferDDF__StreamDesc DmBufferDDF__StreamDesc;
typedef struct DmBufferDDF__BufferDesc DmBufferDDF__BufferDesc;


/* --- enums --- */

/*
 * NOTE: Must match ValueType in dmsdk/buffer.h
 */
typedef enum _DmBufferDDF__ValueType {
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_UINT8 = 0,
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_UINT16 = 1,
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_UINT32 = 2,
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_UINT64 = 3,
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_INT8 = 4,
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_INT16 = 5,
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_INT32 = 6,
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_INT64 = 7,
  DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_FLOAT32 = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_BUFFER_DDF__VALUE_TYPE)
} DmBufferDDF__ValueType;

/* --- messages --- */

struct  DmBufferDDF__StreamDesc
{
  ProtobufCMessage base;
  char *name;
  DmBufferDDF__ValueType value_type;
  uint32_t value_count;
  size_t n_ui;
  uint32_t *ui;
  size_t n_i;
  int32_t *i;
  size_t n_ui64;
  uint64_t *ui64;
  size_t n_i64;
  int64_t *i64;
  size_t n_f;
  float *f;
};
#define DM_BUFFER_DDF__STREAM_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_buffer_ddf__stream_desc__descriptor) \
    , NULL, DM_BUFFER_DDF__VALUE_TYPE__VALUE_TYPE_UINT8, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  DmBufferDDF__BufferDesc
{
  ProtobufCMessage base;
  size_t n_streams;
  DmBufferDDF__StreamDesc **streams;
};
#define DM_BUFFER_DDF__BUFFER_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_buffer_ddf__buffer_desc__descriptor) \
    , 0,NULL }


/* DmBufferDDF__StreamDesc methods */
void   dm_buffer_ddf__stream_desc__init
                     (DmBufferDDF__StreamDesc         *message);
size_t dm_buffer_ddf__stream_desc__get_packed_size
                     (const DmBufferDDF__StreamDesc   *message);
size_t dm_buffer_ddf__stream_desc__pack
                     (const DmBufferDDF__StreamDesc   *message,
                      uint8_t             *out);
size_t dm_buffer_ddf__stream_desc__pack_to_buffer
                     (const DmBufferDDF__StreamDesc   *message,
                      ProtobufCBuffer     *buffer);
DmBufferDDF__StreamDesc *
       dm_buffer_ddf__stream_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_buffer_ddf__stream_desc__free_unpacked
                     (DmBufferDDF__StreamDesc *message,
                      ProtobufCAllocator *allocator);
/* DmBufferDDF__BufferDesc methods */
void   dm_buffer_ddf__buffer_desc__init
                     (DmBufferDDF__BufferDesc         *message);
size_t dm_buffer_ddf__buffer_desc__get_packed_size
                     (const DmBufferDDF__BufferDesc   *message);
size_t dm_buffer_ddf__buffer_desc__pack
                     (const DmBufferDDF__BufferDesc   *message,
                      uint8_t             *out);
size_t dm_buffer_ddf__buffer_desc__pack_to_buffer
                     (const DmBufferDDF__BufferDesc   *message,
                      ProtobufCBuffer     *buffer);
DmBufferDDF__BufferDesc *
       dm_buffer_ddf__buffer_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_buffer_ddf__buffer_desc__free_unpacked
                     (DmBufferDDF__BufferDesc *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmBufferDDF__StreamDesc_Closure)
                 (const DmBufferDDF__StreamDesc *message,
                  void *closure_data);
typedef void (*DmBufferDDF__BufferDesc_Closure)
                 (const DmBufferDDF__BufferDesc *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    dm_buffer_ddf__value_type__descriptor;
extern const ProtobufCMessageDescriptor dm_buffer_ddf__stream_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_buffer_ddf__buffer_desc__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gamesys_2fbuffer_5fddf_2eproto__INCLUDED */
