/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: resource/liveupdate_ddf.proto */

#ifndef PROTOBUF_C_resource_2fliveupdate_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_resource_2fliveupdate_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"

typedef struct DmLiveUpdateDDF__HashDigest DmLiveUpdateDDF__HashDigest;
typedef struct DmLiveUpdateDDF__ManifestHeader DmLiveUpdateDDF__ManifestHeader;
typedef struct DmLiveUpdateDDF__ResourceEntry DmLiveUpdateDDF__ResourceEntry;
typedef struct DmLiveUpdateDDF__ManifestData DmLiveUpdateDDF__ManifestData;
typedef struct DmLiveUpdateDDF__ManifestFile DmLiveUpdateDDF__ManifestFile;


/* --- enums --- */

/*
 * This enum specifies the supported hashing algorithms both for resource
 * verification and signature generation.
 * The HASH_UNKNOWN value is used as a default that cannot be used to create
 * a manifest. This forces every call to explicitly specify the hashing
 * algorithm in order to avoid accidentally downgrading the strength of a hash
 * or unnecessarily using a too expensive hash.
 */
typedef enum _DmLiveUpdateDDF__HashAlgorithm {
  DM_LIVE_UPDATE_DDF__HASH_ALGORITHM__HASH_UNKNOWN = 0,
  DM_LIVE_UPDATE_DDF__HASH_ALGORITHM__HASH_MD5 = 1,
  DM_LIVE_UPDATE_DDF__HASH_ALGORITHM__HASH_SHA1 = 2,
  DM_LIVE_UPDATE_DDF__HASH_ALGORITHM__HASH_SHA256 = 3,
  DM_LIVE_UPDATE_DDF__HASH_ALGORITHM__HASH_SHA512 = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_LIVE_UPDATE_DDF__HASH_ALGORITHM)
} DmLiveUpdateDDF__HashAlgorithm;
/*
 * This enum specifies the supported encryption algorithms used for signature
 * generation.
 * The SIGN_UNKNOWN value is used as a default that cannot be used to create
 * a manifest. This forces every call to explicitly specify the encryption
 * algorithm.
 */
typedef enum _DmLiveUpdateDDF__SignAlgorithm {
  DM_LIVE_UPDATE_DDF__SIGN_ALGORITHM__SIGN_UNKNOWN = 0,
  DM_LIVE_UPDATE_DDF__SIGN_ALGORITHM__SIGN_RSA = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_LIVE_UPDATE_DDF__SIGN_ALGORITHM)
} DmLiveUpdateDDF__SignAlgorithm;
/*
 * Enum flag on manifest resource entry
 */
typedef enum _DmLiveUpdateDDF__ResourceEntryFlag {
  DM_LIVE_UPDATE_DDF__RESOURCE_ENTRY_FLAG__BUNDLED = 1,
  DM_LIVE_UPDATE_DDF__RESOURCE_ENTRY_FLAG__EXCLUDED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_LIVE_UPDATE_DDF__RESOURCE_ENTRY_FLAG)
} DmLiveUpdateDDF__ResourceEntryFlag;

/* --- messages --- */

/*
 * Stores a hashdigest
 */
struct  DmLiveUpdateDDF__HashDigest
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
};
#define DM_LIVE_UPDATE_DDF__HASH_DIGEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_live_update_ddf__hash_digest__descriptor) \
    , {0,NULL} }


/*
 * The manifest header specifies general information about the manifest.
 * - magic_number             : An identifier used to uniquely a manifest
 * - version                  : The version of the manifest format
 * - resource_hash_algorithm  : The algorithm that should be used when hashing
 *                              resources
 * - signature_hash_algorithm : The algorithm that should be used when hashing
 *                              content for signature verification
 * - signature_sign_algorithm : The algorithm that should be used for
 *                              encryption and decryption for signature
 *                              verification
 * - project_identifier       : An identifier meant to uniquely identify a
 *                              project to avoid loading a manifest for a
 *                              different project. This is implemented as the
 *                              SHA-1 hash of the project title
 */
struct  DmLiveUpdateDDF__ManifestHeader
{
  ProtobufCMessage base;
  int32_t magic_number;
  int32_t version;
  DmLiveUpdateDDF__HashAlgorithm resource_hash_algorithm;
  DmLiveUpdateDDF__HashAlgorithm signature_hash_algorithm;
  DmLiveUpdateDDF__SignAlgorithm signature_sign_algorithm;
  DmLiveUpdateDDF__HashDigest *project_identifier;
};
#define DM_LIVE_UPDATE_DDF__MANIFEST_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_live_update_ddf__manifest_header__descriptor) \
    , 0, 0, DM_LIVE_UPDATE_DDF__HASH_ALGORITHM__HASH_SHA256, DM_LIVE_UPDATE_DDF__HASH_ALGORITHM__HASH_SHA256, DM_LIVE_UPDATE_DDF__SIGN_ALGORITHM__SIGN_RSA, NULL }


/*
 * An entry that is produced for each resource that is part of the manifest.
 * - url                      : The URL that is used by the engine to identify
 *                              a resource
 * - hash                     : The hash of the resource data. This is used to
 *                              index each resource in the archive with their
 *                              actual hash.
 * - dependants               : A list of resources (hashes) that are required
 *                              to load the current resource. A Collection that
 *                              is childed to a CollectionProxy is not
 *                              considered a dependant since it is not required
 *                              to load the parent Collection of the
 *                              CollectionProxy.
 * - flags                    : How this resources is stored. Is used for manifest
 *                              verification to determine if a resource is expected
 *                              to be in the bundle or not.
 */
struct  DmLiveUpdateDDF__ResourceEntry
{
  ProtobufCMessage base;
  char *url;
  uint64_t url_hash;
  DmLiveUpdateDDF__HashDigest *hash;
  size_t n_dependants;
  uint32_t *dependants;
  /*
   * ResourceEntryFlag
   */
  uint32_t flags;
};
#define DM_LIVE_UPDATE_DDF__RESOURCE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_live_update_ddf__resource_entry__descriptor) \
    , NULL, 0, NULL, 0,NULL, 0u }


/*
 * The manifest data that contains all information about the project.
 * - header                   : The manifest header
 * - engine_versions          : A list of engine versions (specified by their
 *                              hash and same as sys.engine_info) that are able
 *                              to support the manifest. An engine should only
 *                              attempt to initialize with a manifest that has
 *                              that version of the engine listed as a
 *                              supported engine.
 * - resources                : The resources that are part of the manifest.
 */
struct  DmLiveUpdateDDF__ManifestData
{
  ProtobufCMessage base;
  DmLiveUpdateDDF__ManifestHeader *header;
  size_t n_engine_versions;
  DmLiveUpdateDDF__HashDigest **engine_versions;
  size_t n_resources;
  DmLiveUpdateDDF__ResourceEntry **resources;
};
#define DM_LIVE_UPDATE_DDF__MANIFEST_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_live_update_ddf__manifest_data__descriptor) \
    , NULL, 0,NULL, 0,NULL }


/*
 * The Manifest. This is separate from ManifestData to easily create a
 * signature of the manifest content. Nothing other than a single ManifestData
 * entry and a single signature should be part of this entity.
 */
struct  DmLiveUpdateDDF__ManifestFile
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
  ProtobufCBinaryData signature;
  ProtobufCBinaryData archive_identifier;
};
#define DM_LIVE_UPDATE_DDF__MANIFEST_FILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_live_update_ddf__manifest_file__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL} }


/* DmLiveUpdateDDF__HashDigest methods */
void   dm_live_update_ddf__hash_digest__init
                     (DmLiveUpdateDDF__HashDigest         *message);
size_t dm_live_update_ddf__hash_digest__get_packed_size
                     (const DmLiveUpdateDDF__HashDigest   *message);
size_t dm_live_update_ddf__hash_digest__pack
                     (const DmLiveUpdateDDF__HashDigest   *message,
                      uint8_t             *out);
size_t dm_live_update_ddf__hash_digest__pack_to_buffer
                     (const DmLiveUpdateDDF__HashDigest   *message,
                      ProtobufCBuffer     *buffer);
DmLiveUpdateDDF__HashDigest *
       dm_live_update_ddf__hash_digest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_live_update_ddf__hash_digest__free_unpacked
                     (DmLiveUpdateDDF__HashDigest *message,
                      ProtobufCAllocator *allocator);
/* DmLiveUpdateDDF__ManifestHeader methods */
void   dm_live_update_ddf__manifest_header__init
                     (DmLiveUpdateDDF__ManifestHeader         *message);
size_t dm_live_update_ddf__manifest_header__get_packed_size
                     (const DmLiveUpdateDDF__ManifestHeader   *message);
size_t dm_live_update_ddf__manifest_header__pack
                     (const DmLiveUpdateDDF__ManifestHeader   *message,
                      uint8_t             *out);
size_t dm_live_update_ddf__manifest_header__pack_to_buffer
                     (const DmLiveUpdateDDF__ManifestHeader   *message,
                      ProtobufCBuffer     *buffer);
DmLiveUpdateDDF__ManifestHeader *
       dm_live_update_ddf__manifest_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_live_update_ddf__manifest_header__free_unpacked
                     (DmLiveUpdateDDF__ManifestHeader *message,
                      ProtobufCAllocator *allocator);
/* DmLiveUpdateDDF__ResourceEntry methods */
void   dm_live_update_ddf__resource_entry__init
                     (DmLiveUpdateDDF__ResourceEntry         *message);
size_t dm_live_update_ddf__resource_entry__get_packed_size
                     (const DmLiveUpdateDDF__ResourceEntry   *message);
size_t dm_live_update_ddf__resource_entry__pack
                     (const DmLiveUpdateDDF__ResourceEntry   *message,
                      uint8_t             *out);
size_t dm_live_update_ddf__resource_entry__pack_to_buffer
                     (const DmLiveUpdateDDF__ResourceEntry   *message,
                      ProtobufCBuffer     *buffer);
DmLiveUpdateDDF__ResourceEntry *
       dm_live_update_ddf__resource_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_live_update_ddf__resource_entry__free_unpacked
                     (DmLiveUpdateDDF__ResourceEntry *message,
                      ProtobufCAllocator *allocator);
/* DmLiveUpdateDDF__ManifestData methods */
void   dm_live_update_ddf__manifest_data__init
                     (DmLiveUpdateDDF__ManifestData         *message);
size_t dm_live_update_ddf__manifest_data__get_packed_size
                     (const DmLiveUpdateDDF__ManifestData   *message);
size_t dm_live_update_ddf__manifest_data__pack
                     (const DmLiveUpdateDDF__ManifestData   *message,
                      uint8_t             *out);
size_t dm_live_update_ddf__manifest_data__pack_to_buffer
                     (const DmLiveUpdateDDF__ManifestData   *message,
                      ProtobufCBuffer     *buffer);
DmLiveUpdateDDF__ManifestData *
       dm_live_update_ddf__manifest_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_live_update_ddf__manifest_data__free_unpacked
                     (DmLiveUpdateDDF__ManifestData *message,
                      ProtobufCAllocator *allocator);
/* DmLiveUpdateDDF__ManifestFile methods */
void   dm_live_update_ddf__manifest_file__init
                     (DmLiveUpdateDDF__ManifestFile         *message);
size_t dm_live_update_ddf__manifest_file__get_packed_size
                     (const DmLiveUpdateDDF__ManifestFile   *message);
size_t dm_live_update_ddf__manifest_file__pack
                     (const DmLiveUpdateDDF__ManifestFile   *message,
                      uint8_t             *out);
size_t dm_live_update_ddf__manifest_file__pack_to_buffer
                     (const DmLiveUpdateDDF__ManifestFile   *message,
                      ProtobufCBuffer     *buffer);
DmLiveUpdateDDF__ManifestFile *
       dm_live_update_ddf__manifest_file__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_live_update_ddf__manifest_file__free_unpacked
                     (DmLiveUpdateDDF__ManifestFile *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmLiveUpdateDDF__HashDigest_Closure)
                 (const DmLiveUpdateDDF__HashDigest *message,
                  void *closure_data);
typedef void (*DmLiveUpdateDDF__ManifestHeader_Closure)
                 (const DmLiveUpdateDDF__ManifestHeader *message,
                  void *closure_data);
typedef void (*DmLiveUpdateDDF__ResourceEntry_Closure)
                 (const DmLiveUpdateDDF__ResourceEntry *message,
                  void *closure_data);
typedef void (*DmLiveUpdateDDF__ManifestData_Closure)
                 (const DmLiveUpdateDDF__ManifestData *message,
                  void *closure_data);
typedef void (*DmLiveUpdateDDF__ManifestFile_Closure)
                 (const DmLiveUpdateDDF__ManifestFile *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    dm_live_update_ddf__hash_algorithm__descriptor;
extern const ProtobufCEnumDescriptor    dm_live_update_ddf__sign_algorithm__descriptor;
extern const ProtobufCEnumDescriptor    dm_live_update_ddf__resource_entry_flag__descriptor;
extern const ProtobufCMessageDescriptor dm_live_update_ddf__hash_digest__descriptor;
extern const ProtobufCMessageDescriptor dm_live_update_ddf__manifest_header__descriptor;
extern const ProtobufCMessageDescriptor dm_live_update_ddf__resource_entry__descriptor;
extern const ProtobufCMessageDescriptor dm_live_update_ddf__manifest_data__descriptor;
extern const ProtobufCMessageDescriptor dm_live_update_ddf__manifest_file__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_resource_2fliveupdate_5fddf_2eproto__INCLUDED */
