/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: render/font_ddf.proto */

#ifndef PROTOBUF_C_render_2ffont_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_render_2ffont_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"

typedef struct DmRenderDDF__FontDesc DmRenderDDF__FontDesc;
typedef struct DmRenderDDF__FontMap DmRenderDDF__FontMap;
typedef struct DmRenderDDF__FontMap__Glyph DmRenderDDF__FontMap__Glyph;


/* --- enums --- */

typedef enum _DmRenderDDF__FontTextureFormat {
  DM_RENDER_DDF__FONT_TEXTURE_FORMAT__TYPE_BITMAP = 0,
  DM_RENDER_DDF__FONT_TEXTURE_FORMAT__TYPE_DISTANCE_FIELD = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_RENDER_DDF__FONT_TEXTURE_FORMAT)
} DmRenderDDF__FontTextureFormat;
typedef enum _DmRenderDDF__FontRenderMode {
  DM_RENDER_DDF__FONT_RENDER_MODE__MODE_SINGLE_LAYER = 0,
  DM_RENDER_DDF__FONT_RENDER_MODE__MODE_MULTI_LAYER = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_RENDER_DDF__FONT_RENDER_MODE)
} DmRenderDDF__FontRenderMode;

/* --- messages --- */

struct  DmRenderDDF__FontDesc
{
  ProtobufCMessage base;
  char *font;
  char *material;
  uint32_t size;
  protobuf_c_boolean has_antialias;
  uint32_t antialias;
  protobuf_c_boolean has_alpha;
  float alpha;
  protobuf_c_boolean has_outline_alpha;
  float outline_alpha;
  protobuf_c_boolean has_outline_width;
  float outline_width;
  protobuf_c_boolean has_shadow_alpha;
  float shadow_alpha;
  protobuf_c_boolean has_shadow_blur;
  uint32_t shadow_blur;
  protobuf_c_boolean has_shadow_x;
  float shadow_x;
  protobuf_c_boolean has_shadow_y;
  float shadow_y;
  char *extra_characters;
  protobuf_c_boolean has_output_format;
  DmRenderDDF__FontTextureFormat output_format;
  protobuf_c_boolean has_all_chars;
  protobuf_c_boolean all_chars;
  protobuf_c_boolean has_cache_width;
  uint32_t cache_width;
  protobuf_c_boolean has_cache_height;
  uint32_t cache_height;
  protobuf_c_boolean has_render_mode;
  DmRenderDDF__FontRenderMode render_mode;
};
extern char dm_render_ddf__font_desc__extra_characters__default_value[];
#define DM_RENDER_DDF__FONT_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__font_desc__descriptor) \
    , NULL, NULL, 0, 0, 1u, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0u, 0, 0, 0, 0, dm_render_ddf__font_desc__extra_characters__default_value, 0, DM_RENDER_DDF__FONT_TEXTURE_FORMAT__TYPE_BITMAP, 0, 0, 0, 0u, 0, 0u, 0, DM_RENDER_DDF__FONT_RENDER_MODE__MODE_SINGLE_LAYER }


struct  DmRenderDDF__FontMap__Glyph
{
  ProtobufCMessage base;
  uint32_t character;
  protobuf_c_boolean has_width;
  uint32_t width;
  protobuf_c_boolean has_advance;
  float advance;
  protobuf_c_boolean has_left_bearing;
  float left_bearing;
  protobuf_c_boolean has_ascent;
  uint32_t ascent;
  protobuf_c_boolean has_descent;
  uint32_t descent;
  protobuf_c_boolean has_x;
  int32_t x;
  protobuf_c_boolean has_y;
  int32_t y;
  protobuf_c_boolean has_glyph_data_offset;
  uint64_t glyph_data_offset;
  protobuf_c_boolean has_glyph_data_size;
  uint64_t glyph_data_size;
};
#define DM_RENDER_DDF__FONT_MAP__GLYPH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__font_map__glyph__descriptor) \
    , 0, 0, 0u, 0, 0, 0, 0, 0, 0u, 0, 0u, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  DmRenderDDF__FontMap
{
  ProtobufCMessage base;
  size_t n_glyphs;
  DmRenderDDF__FontMap__Glyph **glyphs;
  char *material;
  protobuf_c_boolean has_shadow_x;
  float shadow_x;
  protobuf_c_boolean has_shadow_y;
  float shadow_y;
  float max_ascent;
  float max_descent;
  protobuf_c_boolean has_image_format;
  DmRenderDDF__FontTextureFormat image_format;
  protobuf_c_boolean has_sdf_spread;
  float sdf_spread;
  protobuf_c_boolean has_sdf_offset;
  float sdf_offset;
  protobuf_c_boolean has_sdf_outline;
  float sdf_outline;
  protobuf_c_boolean has_sdf_shadow;
  float sdf_shadow;
  protobuf_c_boolean has_cache_width;
  uint32_t cache_width;
  protobuf_c_boolean has_cache_height;
  uint32_t cache_height;
  protobuf_c_boolean has_glyph_padding;
  uint64_t glyph_padding;
  protobuf_c_boolean has_cache_cell_width;
  uint32_t cache_cell_width;
  protobuf_c_boolean has_cache_cell_height;
  uint32_t cache_cell_height;
  protobuf_c_boolean has_glyph_channels;
  uint32_t glyph_channels;
  /*
   * glyph data may be compressed
   */
  protobuf_c_boolean has_glyph_data;
  ProtobufCBinaryData glyph_data;
  protobuf_c_boolean has_alpha;
  float alpha;
  protobuf_c_boolean has_outline_alpha;
  float outline_alpha;
  protobuf_c_boolean has_shadow_alpha;
  float shadow_alpha;
  protobuf_c_boolean has_cache_cell_max_ascent;
  uint32_t cache_cell_max_ascent;
  protobuf_c_boolean has_layer_mask;
  uint32_t layer_mask;
};
#define DM_RENDER_DDF__FONT_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__font_map__descriptor) \
    , 0,NULL, NULL, 0, 0, 0, 0, 0, 0, 0, DM_RENDER_DDF__FONT_TEXTURE_FORMAT__TYPE_BITMAP, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0u, 0, 0u, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1u }


/* DmRenderDDF__FontDesc methods */
void   dm_render_ddf__font_desc__init
                     (DmRenderDDF__FontDesc         *message);
size_t dm_render_ddf__font_desc__get_packed_size
                     (const DmRenderDDF__FontDesc   *message);
size_t dm_render_ddf__font_desc__pack
                     (const DmRenderDDF__FontDesc   *message,
                      uint8_t             *out);
size_t dm_render_ddf__font_desc__pack_to_buffer
                     (const DmRenderDDF__FontDesc   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__FontDesc *
       dm_render_ddf__font_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__font_desc__free_unpacked
                     (DmRenderDDF__FontDesc *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__FontMap__Glyph methods */
void   dm_render_ddf__font_map__glyph__init
                     (DmRenderDDF__FontMap__Glyph         *message);
/* DmRenderDDF__FontMap methods */
void   dm_render_ddf__font_map__init
                     (DmRenderDDF__FontMap         *message);
size_t dm_render_ddf__font_map__get_packed_size
                     (const DmRenderDDF__FontMap   *message);
size_t dm_render_ddf__font_map__pack
                     (const DmRenderDDF__FontMap   *message,
                      uint8_t             *out);
size_t dm_render_ddf__font_map__pack_to_buffer
                     (const DmRenderDDF__FontMap   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__FontMap *
       dm_render_ddf__font_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__font_map__free_unpacked
                     (DmRenderDDF__FontMap *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmRenderDDF__FontDesc_Closure)
                 (const DmRenderDDF__FontDesc *message,
                  void *closure_data);
typedef void (*DmRenderDDF__FontMap__Glyph_Closure)
                 (const DmRenderDDF__FontMap__Glyph *message,
                  void *closure_data);
typedef void (*DmRenderDDF__FontMap_Closure)
                 (const DmRenderDDF__FontMap *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    dm_render_ddf__font_texture_format__descriptor;
extern const ProtobufCEnumDescriptor    dm_render_ddf__font_render_mode__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__font_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__font_map__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__font_map__glyph__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_render_2ffont_5fddf_2eproto__INCLUDED */
