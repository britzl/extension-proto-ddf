/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: render/render_ddf.proto */

#ifndef PROTOBUF_C_render_2frender_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_render_2frender_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"

typedef struct DmRenderDDF__RenderPrototypeDesc DmRenderDDF__RenderPrototypeDesc;
typedef struct DmRenderDDF__RenderPrototypeDesc__MaterialDesc DmRenderDDF__RenderPrototypeDesc__MaterialDesc;
typedef struct DmRenderDDF__DrawText DmRenderDDF__DrawText;
typedef struct DmRenderDDF__DrawDebugText DmRenderDDF__DrawDebugText;
typedef struct DmRenderDDF__DrawLine DmRenderDDF__DrawLine;
typedef struct DmRenderDDF__WindowResized DmRenderDDF__WindowResized;
typedef struct DmRenderDDF__Resize DmRenderDDF__Resize;
typedef struct DmRenderDDF__ClearColor DmRenderDDF__ClearColor;
typedef struct DmRenderDDF__DisplayProfileQualifier DmRenderDDF__DisplayProfileQualifier;
typedef struct DmRenderDDF__DisplayProfile DmRenderDDF__DisplayProfile;
typedef struct DmRenderDDF__DisplayProfiles DmRenderDDF__DisplayProfiles;


/* --- enums --- */


/* --- messages --- */

struct  DmRenderDDF__RenderPrototypeDesc__MaterialDesc
{
  ProtobufCMessage base;
  char *name;
  char *material;
};
#define DM_RENDER_DDF__RENDER_PROTOTYPE_DESC__MATERIAL_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__render_prototype_desc__material_desc__descriptor) \
    , NULL, NULL }


struct  DmRenderDDF__RenderPrototypeDesc
{
  ProtobufCMessage base;
  char *script;
  size_t n_materials;
  DmRenderDDF__RenderPrototypeDesc__MaterialDesc **materials;
};
#define DM_RENDER_DDF__RENDER_PROTOTYPE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__render_prototype_desc__descriptor) \
    , NULL, 0,NULL }


struct  DmRenderDDF__DrawText
{
  ProtobufCMessage base;
  DmMath__Point3 *position;
  char *text;
};
#define DM_RENDER_DDF__DRAW_TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__draw_text__descriptor) \
    , NULL, NULL }


/*
 *# draw a text on the screen
 * Draw a text on the screen. This should be used for debugging purposes only.
 * @message
 * @name draw_debug_text
 * @param position [type:vector3] position of the text
 * @param text [type:string] the text to draw
 * @param color [type:vector4] color of the text
 * @examples
 * ```lua
 * msg.post("@render:", "draw_debug_text", { text = "Hello world!", position = vmath.vector3(200, 200, 0), color = vmath.vector4(1, 0, 0, 1) } )
 * ```
 */
struct  DmRenderDDF__DrawDebugText
{
  ProtobufCMessage base;
  DmMath__Point3 *position;
  char *text;
  DmMath__Vector4 *color;
};
#define DM_RENDER_DDF__DRAW_DEBUG_TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__draw_debug_text__descriptor) \
    , NULL, NULL, NULL }


/*
 *# draw a line on the screen
 * Draw a line on the screen. This should mostly be used for debugging purposes.
 * @message
 * @name draw_line
 * @param start_point [type:vector3] start point of the line
 * @param end_point [type:vector3] end point of the line
 * @param color [type:vector4] color of the line
 * @examples
 * ```lua
 * -- draw a white line from (200, 200) to (200, 300)
 * msg.post("@render:", "draw_line", { start_point = vmath.vector3(200, 200, 0), end_point = vmath.vector3(200, 300, 0), color = vmath.vector4(1, 1, 1, 1) } )
 * ```
 */
struct  DmRenderDDF__DrawLine
{
  ProtobufCMessage base;
  DmMath__Point3 *start_point;
  DmMath__Point3 *end_point;
  DmMath__Vector4 *color;
};
#define DM_RENDER_DDF__DRAW_LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__draw_line__descriptor) \
    , NULL, NULL, NULL }


/*
 *# reports a window size change
 * Reports a change in window size. This is initiated on window resize on desktop or by orientation changes
 * on mobile devices.
 * @message
 * @name window_resized
 * @param height [type:number] the new window height
 * @param width [type:number] the new window width
 * @examples
 * ```lua
 * function on_message(self, message_id, message)
 *     -- check for the message
 *     if message_id == hash("window_resized") then
 *         -- the window was resized.
 *     end
 * end
 * ```
 */
struct  DmRenderDDF__WindowResized
{
  ProtobufCMessage base;
  uint32_t width;
  uint32_t height;
};
#define DM_RENDER_DDF__WINDOW_RESIZED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__window_resized__descriptor) \
    , 0, 0 }


/*
 *# resizes the window
 * Set the size of the game window. Only works on desktop platforms.
 * @message
 * @name resize
 * @param height [type:number] the new window height
 * @param width [type:number] the new window width
 * @examples
 * ```lua
 * msg.post("@render:", "resize", { width = 1024, height = 768 } )
 * ```
 */
struct  DmRenderDDF__Resize
{
  ProtobufCMessage base;
  uint32_t width;
  uint32_t height;
};
#define DM_RENDER_DDF__RESIZE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__resize__descriptor) \
    , 0, 0 }


/*
 *# set clear color
 * Set render clear color. This is the color that appears on the screen where nothing is rendered, i.e. background.
 * @message
 * @name clear_color
 * @param color [type:vector4] color to use as clear color
 * @examples
 * ```lua
 * msg.post("@render:", "clear_color", { color = vmath.vector4(1, 0, 0, 0) } )
 * ```
 */
struct  DmRenderDDF__ClearColor
{
  ProtobufCMessage base;
  DmMath__Vector4 *color;
};
#define DM_RENDER_DDF__CLEAR_COLOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__clear_color__descriptor) \
    , NULL }


struct  DmRenderDDF__DisplayProfileQualifier
{
  ProtobufCMessage base;
  uint32_t width;
  uint32_t height;
  size_t n_device_models;
  char **device_models;
};
#define DM_RENDER_DDF__DISPLAY_PROFILE_QUALIFIER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__display_profile_qualifier__descriptor) \
    , 0, 0, 0,NULL }


struct  DmRenderDDF__DisplayProfile
{
  ProtobufCMessage base;
  char *name;
  size_t n_qualifiers;
  DmRenderDDF__DisplayProfileQualifier **qualifiers;
};
#define DM_RENDER_DDF__DISPLAY_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__display_profile__descriptor) \
    , NULL, 0,NULL }


struct  DmRenderDDF__DisplayProfiles
{
  ProtobufCMessage base;
  size_t n_profiles;
  DmRenderDDF__DisplayProfile **profiles;
};
#define DM_RENDER_DDF__DISPLAY_PROFILES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_render_ddf__display_profiles__descriptor) \
    , 0,NULL }


/* DmRenderDDF__RenderPrototypeDesc__MaterialDesc methods */
void   dm_render_ddf__render_prototype_desc__material_desc__init
                     (DmRenderDDF__RenderPrototypeDesc__MaterialDesc         *message);
/* DmRenderDDF__RenderPrototypeDesc methods */
void   dm_render_ddf__render_prototype_desc__init
                     (DmRenderDDF__RenderPrototypeDesc         *message);
size_t dm_render_ddf__render_prototype_desc__get_packed_size
                     (const DmRenderDDF__RenderPrototypeDesc   *message);
size_t dm_render_ddf__render_prototype_desc__pack
                     (const DmRenderDDF__RenderPrototypeDesc   *message,
                      uint8_t             *out);
size_t dm_render_ddf__render_prototype_desc__pack_to_buffer
                     (const DmRenderDDF__RenderPrototypeDesc   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__RenderPrototypeDesc *
       dm_render_ddf__render_prototype_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__render_prototype_desc__free_unpacked
                     (DmRenderDDF__RenderPrototypeDesc *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__DrawText methods */
void   dm_render_ddf__draw_text__init
                     (DmRenderDDF__DrawText         *message);
size_t dm_render_ddf__draw_text__get_packed_size
                     (const DmRenderDDF__DrawText   *message);
size_t dm_render_ddf__draw_text__pack
                     (const DmRenderDDF__DrawText   *message,
                      uint8_t             *out);
size_t dm_render_ddf__draw_text__pack_to_buffer
                     (const DmRenderDDF__DrawText   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__DrawText *
       dm_render_ddf__draw_text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__draw_text__free_unpacked
                     (DmRenderDDF__DrawText *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__DrawDebugText methods */
void   dm_render_ddf__draw_debug_text__init
                     (DmRenderDDF__DrawDebugText         *message);
size_t dm_render_ddf__draw_debug_text__get_packed_size
                     (const DmRenderDDF__DrawDebugText   *message);
size_t dm_render_ddf__draw_debug_text__pack
                     (const DmRenderDDF__DrawDebugText   *message,
                      uint8_t             *out);
size_t dm_render_ddf__draw_debug_text__pack_to_buffer
                     (const DmRenderDDF__DrawDebugText   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__DrawDebugText *
       dm_render_ddf__draw_debug_text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__draw_debug_text__free_unpacked
                     (DmRenderDDF__DrawDebugText *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__DrawLine methods */
void   dm_render_ddf__draw_line__init
                     (DmRenderDDF__DrawLine         *message);
size_t dm_render_ddf__draw_line__get_packed_size
                     (const DmRenderDDF__DrawLine   *message);
size_t dm_render_ddf__draw_line__pack
                     (const DmRenderDDF__DrawLine   *message,
                      uint8_t             *out);
size_t dm_render_ddf__draw_line__pack_to_buffer
                     (const DmRenderDDF__DrawLine   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__DrawLine *
       dm_render_ddf__draw_line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__draw_line__free_unpacked
                     (DmRenderDDF__DrawLine *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__WindowResized methods */
void   dm_render_ddf__window_resized__init
                     (DmRenderDDF__WindowResized         *message);
size_t dm_render_ddf__window_resized__get_packed_size
                     (const DmRenderDDF__WindowResized   *message);
size_t dm_render_ddf__window_resized__pack
                     (const DmRenderDDF__WindowResized   *message,
                      uint8_t             *out);
size_t dm_render_ddf__window_resized__pack_to_buffer
                     (const DmRenderDDF__WindowResized   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__WindowResized *
       dm_render_ddf__window_resized__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__window_resized__free_unpacked
                     (DmRenderDDF__WindowResized *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__Resize methods */
void   dm_render_ddf__resize__init
                     (DmRenderDDF__Resize         *message);
size_t dm_render_ddf__resize__get_packed_size
                     (const DmRenderDDF__Resize   *message);
size_t dm_render_ddf__resize__pack
                     (const DmRenderDDF__Resize   *message,
                      uint8_t             *out);
size_t dm_render_ddf__resize__pack_to_buffer
                     (const DmRenderDDF__Resize   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__Resize *
       dm_render_ddf__resize__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__resize__free_unpacked
                     (DmRenderDDF__Resize *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__ClearColor methods */
void   dm_render_ddf__clear_color__init
                     (DmRenderDDF__ClearColor         *message);
size_t dm_render_ddf__clear_color__get_packed_size
                     (const DmRenderDDF__ClearColor   *message);
size_t dm_render_ddf__clear_color__pack
                     (const DmRenderDDF__ClearColor   *message,
                      uint8_t             *out);
size_t dm_render_ddf__clear_color__pack_to_buffer
                     (const DmRenderDDF__ClearColor   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__ClearColor *
       dm_render_ddf__clear_color__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__clear_color__free_unpacked
                     (DmRenderDDF__ClearColor *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__DisplayProfileQualifier methods */
void   dm_render_ddf__display_profile_qualifier__init
                     (DmRenderDDF__DisplayProfileQualifier         *message);
size_t dm_render_ddf__display_profile_qualifier__get_packed_size
                     (const DmRenderDDF__DisplayProfileQualifier   *message);
size_t dm_render_ddf__display_profile_qualifier__pack
                     (const DmRenderDDF__DisplayProfileQualifier   *message,
                      uint8_t             *out);
size_t dm_render_ddf__display_profile_qualifier__pack_to_buffer
                     (const DmRenderDDF__DisplayProfileQualifier   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__DisplayProfileQualifier *
       dm_render_ddf__display_profile_qualifier__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__display_profile_qualifier__free_unpacked
                     (DmRenderDDF__DisplayProfileQualifier *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__DisplayProfile methods */
void   dm_render_ddf__display_profile__init
                     (DmRenderDDF__DisplayProfile         *message);
size_t dm_render_ddf__display_profile__get_packed_size
                     (const DmRenderDDF__DisplayProfile   *message);
size_t dm_render_ddf__display_profile__pack
                     (const DmRenderDDF__DisplayProfile   *message,
                      uint8_t             *out);
size_t dm_render_ddf__display_profile__pack_to_buffer
                     (const DmRenderDDF__DisplayProfile   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__DisplayProfile *
       dm_render_ddf__display_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__display_profile__free_unpacked
                     (DmRenderDDF__DisplayProfile *message,
                      ProtobufCAllocator *allocator);
/* DmRenderDDF__DisplayProfiles methods */
void   dm_render_ddf__display_profiles__init
                     (DmRenderDDF__DisplayProfiles         *message);
size_t dm_render_ddf__display_profiles__get_packed_size
                     (const DmRenderDDF__DisplayProfiles   *message);
size_t dm_render_ddf__display_profiles__pack
                     (const DmRenderDDF__DisplayProfiles   *message,
                      uint8_t             *out);
size_t dm_render_ddf__display_profiles__pack_to_buffer
                     (const DmRenderDDF__DisplayProfiles   *message,
                      ProtobufCBuffer     *buffer);
DmRenderDDF__DisplayProfiles *
       dm_render_ddf__display_profiles__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_render_ddf__display_profiles__free_unpacked
                     (DmRenderDDF__DisplayProfiles *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmRenderDDF__RenderPrototypeDesc__MaterialDesc_Closure)
                 (const DmRenderDDF__RenderPrototypeDesc__MaterialDesc *message,
                  void *closure_data);
typedef void (*DmRenderDDF__RenderPrototypeDesc_Closure)
                 (const DmRenderDDF__RenderPrototypeDesc *message,
                  void *closure_data);
typedef void (*DmRenderDDF__DrawText_Closure)
                 (const DmRenderDDF__DrawText *message,
                  void *closure_data);
typedef void (*DmRenderDDF__DrawDebugText_Closure)
                 (const DmRenderDDF__DrawDebugText *message,
                  void *closure_data);
typedef void (*DmRenderDDF__DrawLine_Closure)
                 (const DmRenderDDF__DrawLine *message,
                  void *closure_data);
typedef void (*DmRenderDDF__WindowResized_Closure)
                 (const DmRenderDDF__WindowResized *message,
                  void *closure_data);
typedef void (*DmRenderDDF__Resize_Closure)
                 (const DmRenderDDF__Resize *message,
                  void *closure_data);
typedef void (*DmRenderDDF__ClearColor_Closure)
                 (const DmRenderDDF__ClearColor *message,
                  void *closure_data);
typedef void (*DmRenderDDF__DisplayProfileQualifier_Closure)
                 (const DmRenderDDF__DisplayProfileQualifier *message,
                  void *closure_data);
typedef void (*DmRenderDDF__DisplayProfile_Closure)
                 (const DmRenderDDF__DisplayProfile *message,
                  void *closure_data);
typedef void (*DmRenderDDF__DisplayProfiles_Closure)
                 (const DmRenderDDF__DisplayProfiles *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dm_render_ddf__render_prototype_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__render_prototype_desc__material_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__draw_text__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__draw_debug_text__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__draw_line__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__window_resized__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__resize__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__clear_color__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__display_profile_qualifier__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__display_profile__descriptor;
extern const ProtobufCMessageDescriptor dm_render_ddf__display_profiles__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_render_2frender_5fddf_2eproto__INCLUDED */
