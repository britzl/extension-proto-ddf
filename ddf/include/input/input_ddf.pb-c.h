/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: input/input_ddf.proto */

#ifndef PROTOBUF_C_input_2finput_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_input_2finput_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"
#include "ddf/ddf_math.pb-c.h"

typedef struct DmInputDDF__GamepadModifierT DmInputDDF__GamepadModifierT;
typedef struct DmInputDDF__GamepadMapEntry DmInputDDF__GamepadMapEntry;
typedef struct DmInputDDF__GamepadMap DmInputDDF__GamepadMap;
typedef struct DmInputDDF__GamepadMaps DmInputDDF__GamepadMaps;
typedef struct DmInputDDF__KeyTrigger DmInputDDF__KeyTrigger;
typedef struct DmInputDDF__MouseTrigger DmInputDDF__MouseTrigger;
typedef struct DmInputDDF__GamepadTrigger DmInputDDF__GamepadTrigger;
typedef struct DmInputDDF__TouchTrigger DmInputDDF__TouchTrigger;
typedef struct DmInputDDF__TextTrigger DmInputDDF__TextTrigger;
typedef struct DmInputDDF__InputBinding DmInputDDF__InputBinding;


/* --- enums --- */

typedef enum _DmInputDDF__Key {
  DM_INPUT_DDF__KEY__KEY_SPACE = 0,
  DM_INPUT_DDF__KEY__KEY_EXCLAIM = 1,
  DM_INPUT_DDF__KEY__KEY_QUOTEDBL = 2,
  DM_INPUT_DDF__KEY__KEY_HASH = 3,
  DM_INPUT_DDF__KEY__KEY_DOLLAR = 4,
  DM_INPUT_DDF__KEY__KEY_AMPERSAND = 5,
  DM_INPUT_DDF__KEY__KEY_QUOTE = 6,
  DM_INPUT_DDF__KEY__KEY_LPAREN = 7,
  DM_INPUT_DDF__KEY__KEY_RPAREN = 8,
  DM_INPUT_DDF__KEY__KEY_ASTERISK = 9,
  DM_INPUT_DDF__KEY__KEY_PLUS = 10,
  DM_INPUT_DDF__KEY__KEY_COMMA = 11,
  DM_INPUT_DDF__KEY__KEY_MINUS = 12,
  DM_INPUT_DDF__KEY__KEY_PERIOD = 13,
  DM_INPUT_DDF__KEY__KEY_SLASH = 14,
  DM_INPUT_DDF__KEY__KEY_0 = 15,
  DM_INPUT_DDF__KEY__KEY_1 = 16,
  DM_INPUT_DDF__KEY__KEY_2 = 17,
  DM_INPUT_DDF__KEY__KEY_3 = 18,
  DM_INPUT_DDF__KEY__KEY_4 = 19,
  DM_INPUT_DDF__KEY__KEY_5 = 20,
  DM_INPUT_DDF__KEY__KEY_6 = 21,
  DM_INPUT_DDF__KEY__KEY_7 = 22,
  DM_INPUT_DDF__KEY__KEY_8 = 23,
  DM_INPUT_DDF__KEY__KEY_9 = 24,
  DM_INPUT_DDF__KEY__KEY_COLON = 25,
  DM_INPUT_DDF__KEY__KEY_SEMICOLON = 26,
  DM_INPUT_DDF__KEY__KEY_LESS = 27,
  DM_INPUT_DDF__KEY__KEY_EQUALS = 28,
  DM_INPUT_DDF__KEY__KEY_GREATER = 29,
  DM_INPUT_DDF__KEY__KEY_QUESTION = 30,
  DM_INPUT_DDF__KEY__KEY_AT = 31,
  DM_INPUT_DDF__KEY__KEY_A = 32,
  DM_INPUT_DDF__KEY__KEY_B = 33,
  DM_INPUT_DDF__KEY__KEY_C = 34,
  DM_INPUT_DDF__KEY__KEY_D = 35,
  DM_INPUT_DDF__KEY__KEY_E = 36,
  DM_INPUT_DDF__KEY__KEY_F = 37,
  DM_INPUT_DDF__KEY__KEY_G = 38,
  DM_INPUT_DDF__KEY__KEY_H = 39,
  DM_INPUT_DDF__KEY__KEY_I = 40,
  DM_INPUT_DDF__KEY__KEY_J = 41,
  DM_INPUT_DDF__KEY__KEY_K = 42,
  DM_INPUT_DDF__KEY__KEY_L = 43,
  DM_INPUT_DDF__KEY__KEY_M = 44,
  DM_INPUT_DDF__KEY__KEY_N = 45,
  DM_INPUT_DDF__KEY__KEY_O = 46,
  DM_INPUT_DDF__KEY__KEY_P = 47,
  DM_INPUT_DDF__KEY__KEY_Q = 48,
  DM_INPUT_DDF__KEY__KEY_R = 49,
  DM_INPUT_DDF__KEY__KEY_S = 50,
  DM_INPUT_DDF__KEY__KEY_T = 51,
  DM_INPUT_DDF__KEY__KEY_U = 52,
  DM_INPUT_DDF__KEY__KEY_V = 53,
  DM_INPUT_DDF__KEY__KEY_W = 54,
  DM_INPUT_DDF__KEY__KEY_X = 55,
  DM_INPUT_DDF__KEY__KEY_Y = 56,
  DM_INPUT_DDF__KEY__KEY_Z = 57,
  DM_INPUT_DDF__KEY__KEY_LBRACKET = 58,
  DM_INPUT_DDF__KEY__KEY_BACKSLASH = 59,
  DM_INPUT_DDF__KEY__KEY_RBRACKET = 60,
  DM_INPUT_DDF__KEY__KEY_CARET = 61,
  DM_INPUT_DDF__KEY__KEY_UNDERSCORE = 62,
  DM_INPUT_DDF__KEY__KEY_BACKQUOTE = 63,
  DM_INPUT_DDF__KEY__KEY_LBRACE = 64,
  DM_INPUT_DDF__KEY__KEY_PIPE = 65,
  DM_INPUT_DDF__KEY__KEY_RBRACE = 66,
  DM_INPUT_DDF__KEY__KEY_TILDE = 67,
  DM_INPUT_DDF__KEY__KEY_ESC = 68,
  DM_INPUT_DDF__KEY__KEY_F1 = 69,
  DM_INPUT_DDF__KEY__KEY_F2 = 70,
  DM_INPUT_DDF__KEY__KEY_F3 = 71,
  DM_INPUT_DDF__KEY__KEY_F4 = 72,
  DM_INPUT_DDF__KEY__KEY_F5 = 73,
  DM_INPUT_DDF__KEY__KEY_F6 = 74,
  DM_INPUT_DDF__KEY__KEY_F7 = 75,
  DM_INPUT_DDF__KEY__KEY_F8 = 76,
  DM_INPUT_DDF__KEY__KEY_F9 = 77,
  DM_INPUT_DDF__KEY__KEY_F10 = 78,
  DM_INPUT_DDF__KEY__KEY_F11 = 79,
  DM_INPUT_DDF__KEY__KEY_F12 = 80,
  DM_INPUT_DDF__KEY__KEY_UP = 81,
  DM_INPUT_DDF__KEY__KEY_DOWN = 82,
  DM_INPUT_DDF__KEY__KEY_LEFT = 83,
  DM_INPUT_DDF__KEY__KEY_RIGHT = 84,
  DM_INPUT_DDF__KEY__KEY_LSHIFT = 85,
  DM_INPUT_DDF__KEY__KEY_RSHIFT = 86,
  DM_INPUT_DDF__KEY__KEY_LCTRL = 87,
  DM_INPUT_DDF__KEY__KEY_RCTRL = 88,
  DM_INPUT_DDF__KEY__KEY_LALT = 89,
  DM_INPUT_DDF__KEY__KEY_RALT = 90,
  DM_INPUT_DDF__KEY__KEY_TAB = 91,
  DM_INPUT_DDF__KEY__KEY_ENTER = 92,
  DM_INPUT_DDF__KEY__KEY_BACKSPACE = 93,
  DM_INPUT_DDF__KEY__KEY_INSERT = 94,
  DM_INPUT_DDF__KEY__KEY_DEL = 95,
  DM_INPUT_DDF__KEY__KEY_PAGEUP = 96,
  DM_INPUT_DDF__KEY__KEY_PAGEDOWN = 97,
  DM_INPUT_DDF__KEY__KEY_HOME = 98,
  DM_INPUT_DDF__KEY__KEY_END = 99,
  DM_INPUT_DDF__KEY__KEY_KP_0 = 100,
  DM_INPUT_DDF__KEY__KEY_KP_1 = 101,
  DM_INPUT_DDF__KEY__KEY_KP_2 = 102,
  DM_INPUT_DDF__KEY__KEY_KP_3 = 103,
  DM_INPUT_DDF__KEY__KEY_KP_4 = 104,
  DM_INPUT_DDF__KEY__KEY_KP_5 = 105,
  DM_INPUT_DDF__KEY__KEY_KP_6 = 106,
  DM_INPUT_DDF__KEY__KEY_KP_7 = 107,
  DM_INPUT_DDF__KEY__KEY_KP_8 = 108,
  DM_INPUT_DDF__KEY__KEY_KP_9 = 109,
  DM_INPUT_DDF__KEY__KEY_KP_DIVIDE = 110,
  DM_INPUT_DDF__KEY__KEY_KP_MULTIPLY = 111,
  DM_INPUT_DDF__KEY__KEY_KP_SUBTRACT = 112,
  DM_INPUT_DDF__KEY__KEY_KP_ADD = 113,
  DM_INPUT_DDF__KEY__KEY_KP_DECIMAL = 114,
  DM_INPUT_DDF__KEY__KEY_KP_EQUAL = 115,
  DM_INPUT_DDF__KEY__KEY_KP_ENTER = 116,
  DM_INPUT_DDF__KEY__KEY_KP_NUM_LOCK = 117,
  DM_INPUT_DDF__KEY__KEY_CAPS_LOCK = 118,
  DM_INPUT_DDF__KEY__KEY_SCROLL_LOCK = 119,
  DM_INPUT_DDF__KEY__KEY_PAUSE = 120,
  DM_INPUT_DDF__KEY__KEY_LSUPER = 121,
  DM_INPUT_DDF__KEY__KEY_RSUPER = 122,
  DM_INPUT_DDF__KEY__KEY_MENU = 123,
  DM_INPUT_DDF__KEY__KEY_BACK = 124,
  DM_INPUT_DDF__KEY__MAX_KEY_COUNT = 125
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_INPUT_DDF__KEY)
} DmInputDDF__Key;
typedef enum _DmInputDDF__Mouse {
  DM_INPUT_DDF__MOUSE__MOUSE_WHEEL_UP = 0,
  DM_INPUT_DDF__MOUSE__MOUSE_WHEEL_DOWN = 1,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_LEFT = 2,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_MIDDLE = 3,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_RIGHT = 4,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_1 = 5,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_2 = 6,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_3 = 7,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_4 = 8,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_5 = 9,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_6 = 10,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_7 = 11,
  DM_INPUT_DDF__MOUSE__MOUSE_BUTTON_8 = 12,
  DM_INPUT_DDF__MOUSE__MAX_MOUSE_COUNT = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_INPUT_DDF__MOUSE)
} DmInputDDF__Mouse;
typedef enum _DmInputDDF__Gamepad {
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LSTICK_LEFT = 0,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LSTICK_RIGHT = 1,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LSTICK_DOWN = 2,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LSTICK_UP = 3,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LSTICK_CLICK = 4,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LTRIGGER = 5,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LSHOULDER = 6,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LPAD_LEFT = 7,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LPAD_RIGHT = 8,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LPAD_DOWN = 9,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_LPAD_UP = 10,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RSTICK_LEFT = 11,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RSTICK_RIGHT = 12,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RSTICK_DOWN = 13,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RSTICK_UP = 14,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RSTICK_CLICK = 15,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RTRIGGER = 16,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RSHOULDER = 17,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RPAD_LEFT = 18,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RPAD_RIGHT = 19,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RPAD_DOWN = 20,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RPAD_UP = 21,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_START = 22,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_BACK = 23,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_GUIDE = 24,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_CONNECTED = 25,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_DISCONNECTED = 26,
  DM_INPUT_DDF__GAMEPAD__GAMEPAD_RAW = 27,
  DM_INPUT_DDF__GAMEPAD__MAX_GAMEPAD_COUNT = 28
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_INPUT_DDF__GAMEPAD)
} DmInputDDF__Gamepad;
typedef enum _DmInputDDF__GamepadType {
  DM_INPUT_DDF__GAMEPAD_TYPE__GAMEPAD_TYPE_AXIS = 0,
  DM_INPUT_DDF__GAMEPAD_TYPE__GAMEPAD_TYPE_BUTTON = 1,
  DM_INPUT_DDF__GAMEPAD_TYPE__GAMEPAD_TYPE_HAT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_INPUT_DDF__GAMEPAD_TYPE)
} DmInputDDF__GamepadType;
typedef enum _DmInputDDF__GamepadModifier {
  DM_INPUT_DDF__GAMEPAD_MODIFIER__GAMEPAD_MODIFIER_NEGATE = 0,
  DM_INPUT_DDF__GAMEPAD_MODIFIER__GAMEPAD_MODIFIER_SCALE = 1,
  DM_INPUT_DDF__GAMEPAD_MODIFIER__GAMEPAD_MODIFIER_CLAMP = 2,
  DM_INPUT_DDF__GAMEPAD_MODIFIER__MAX_GAMEPAD_MODIFIER_COUNT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_INPUT_DDF__GAMEPAD_MODIFIER)
} DmInputDDF__GamepadModifier;
typedef enum _DmInputDDF__Touch {
  DM_INPUT_DDF__TOUCH__TOUCH_MULTI = 0,
  DM_INPUT_DDF__TOUCH__MAX_TOUCH_COUNT = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_INPUT_DDF__TOUCH)
} DmInputDDF__Touch;
typedef enum _DmInputDDF__Text {
  DM_INPUT_DDF__TEXT__TEXT = 0,
  DM_INPUT_DDF__TEXT__MARKED_TEXT = 1,
  DM_INPUT_DDF__TEXT__MAX_TEXT_COUNT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_INPUT_DDF__TEXT)
} DmInputDDF__Text;

/* --- messages --- */

struct  DmInputDDF__GamepadModifierT
{
  ProtobufCMessage base;
  DmInputDDF__GamepadModifier mod;
};
#define DM_INPUT_DDF__GAMEPAD_MODIFIER_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__gamepad_modifier_t__descriptor) \
    , DM_INPUT_DDF__GAMEPAD_MODIFIER__GAMEPAD_MODIFIER_NEGATE }


struct  DmInputDDF__GamepadMapEntry
{
  ProtobufCMessage base;
  DmInputDDF__Gamepad input;
  DmInputDDF__GamepadType type;
  uint32_t index;
  size_t n_mod;
  DmInputDDF__GamepadModifierT **mod;
  protobuf_c_boolean has_hat_mask;
  uint32_t hat_mask;
};
#define DM_INPUT_DDF__GAMEPAD_MAP_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__gamepad_map_entry__descriptor) \
    , DM_INPUT_DDF__GAMEPAD__GAMEPAD_LSTICK_LEFT, DM_INPUT_DDF__GAMEPAD_TYPE__GAMEPAD_TYPE_AXIS, 0, 0,NULL, 0, 0 }


struct  DmInputDDF__GamepadMap
{
  ProtobufCMessage base;
  char *device;
  char *platform;
  float dead_zone;
  size_t n_map;
  DmInputDDF__GamepadMapEntry **map;
};
#define DM_INPUT_DDF__GAMEPAD_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__gamepad_map__descriptor) \
    , NULL, NULL, 0, 0,NULL }


struct  DmInputDDF__GamepadMaps
{
  ProtobufCMessage base;
  size_t n_driver;
  DmInputDDF__GamepadMap **driver;
};
#define DM_INPUT_DDF__GAMEPAD_MAPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__gamepad_maps__descriptor) \
    , 0,NULL }


struct  DmInputDDF__KeyTrigger
{
  ProtobufCMessage base;
  DmInputDDF__Key input;
  char *action;
};
#define DM_INPUT_DDF__KEY_TRIGGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__key_trigger__descriptor) \
    , DM_INPUT_DDF__KEY__KEY_SPACE, NULL }


struct  DmInputDDF__MouseTrigger
{
  ProtobufCMessage base;
  DmInputDDF__Mouse input;
  char *action;
};
#define DM_INPUT_DDF__MOUSE_TRIGGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__mouse_trigger__descriptor) \
    , DM_INPUT_DDF__MOUSE__MOUSE_WHEEL_UP, NULL }


struct  DmInputDDF__GamepadTrigger
{
  ProtobufCMessage base;
  DmInputDDF__Gamepad input;
  char *action;
};
#define DM_INPUT_DDF__GAMEPAD_TRIGGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__gamepad_trigger__descriptor) \
    , DM_INPUT_DDF__GAMEPAD__GAMEPAD_LSTICK_LEFT, NULL }


struct  DmInputDDF__TouchTrigger
{
  ProtobufCMessage base;
  DmInputDDF__Touch input;
  char *action;
};
#define DM_INPUT_DDF__TOUCH_TRIGGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__touch_trigger__descriptor) \
    , DM_INPUT_DDF__TOUCH__TOUCH_MULTI, NULL }


struct  DmInputDDF__TextTrigger
{
  ProtobufCMessage base;
  DmInputDDF__Text input;
  char *action;
};
#define DM_INPUT_DDF__TEXT_TRIGGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__text_trigger__descriptor) \
    , DM_INPUT_DDF__TEXT__TEXT, NULL }


struct  DmInputDDF__InputBinding
{
  ProtobufCMessage base;
  size_t n_key_trigger;
  DmInputDDF__KeyTrigger **key_trigger;
  size_t n_mouse_trigger;
  DmInputDDF__MouseTrigger **mouse_trigger;
  size_t n_gamepad_trigger;
  DmInputDDF__GamepadTrigger **gamepad_trigger;
  size_t n_touch_trigger;
  DmInputDDF__TouchTrigger **touch_trigger;
  size_t n_text_trigger;
  DmInputDDF__TextTrigger **text_trigger;
};
#define DM_INPUT_DDF__INPUT_BINDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_input_ddf__input_binding__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* DmInputDDF__GamepadModifierT methods */
void   dm_input_ddf__gamepad_modifier_t__init
                     (DmInputDDF__GamepadModifierT         *message);
size_t dm_input_ddf__gamepad_modifier_t__get_packed_size
                     (const DmInputDDF__GamepadModifierT   *message);
size_t dm_input_ddf__gamepad_modifier_t__pack
                     (const DmInputDDF__GamepadModifierT   *message,
                      uint8_t             *out);
size_t dm_input_ddf__gamepad_modifier_t__pack_to_buffer
                     (const DmInputDDF__GamepadModifierT   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__GamepadModifierT *
       dm_input_ddf__gamepad_modifier_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__gamepad_modifier_t__free_unpacked
                     (DmInputDDF__GamepadModifierT *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__GamepadMapEntry methods */
void   dm_input_ddf__gamepad_map_entry__init
                     (DmInputDDF__GamepadMapEntry         *message);
size_t dm_input_ddf__gamepad_map_entry__get_packed_size
                     (const DmInputDDF__GamepadMapEntry   *message);
size_t dm_input_ddf__gamepad_map_entry__pack
                     (const DmInputDDF__GamepadMapEntry   *message,
                      uint8_t             *out);
size_t dm_input_ddf__gamepad_map_entry__pack_to_buffer
                     (const DmInputDDF__GamepadMapEntry   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__GamepadMapEntry *
       dm_input_ddf__gamepad_map_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__gamepad_map_entry__free_unpacked
                     (DmInputDDF__GamepadMapEntry *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__GamepadMap methods */
void   dm_input_ddf__gamepad_map__init
                     (DmInputDDF__GamepadMap         *message);
size_t dm_input_ddf__gamepad_map__get_packed_size
                     (const DmInputDDF__GamepadMap   *message);
size_t dm_input_ddf__gamepad_map__pack
                     (const DmInputDDF__GamepadMap   *message,
                      uint8_t             *out);
size_t dm_input_ddf__gamepad_map__pack_to_buffer
                     (const DmInputDDF__GamepadMap   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__GamepadMap *
       dm_input_ddf__gamepad_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__gamepad_map__free_unpacked
                     (DmInputDDF__GamepadMap *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__GamepadMaps methods */
void   dm_input_ddf__gamepad_maps__init
                     (DmInputDDF__GamepadMaps         *message);
size_t dm_input_ddf__gamepad_maps__get_packed_size
                     (const DmInputDDF__GamepadMaps   *message);
size_t dm_input_ddf__gamepad_maps__pack
                     (const DmInputDDF__GamepadMaps   *message,
                      uint8_t             *out);
size_t dm_input_ddf__gamepad_maps__pack_to_buffer
                     (const DmInputDDF__GamepadMaps   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__GamepadMaps *
       dm_input_ddf__gamepad_maps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__gamepad_maps__free_unpacked
                     (DmInputDDF__GamepadMaps *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__KeyTrigger methods */
void   dm_input_ddf__key_trigger__init
                     (DmInputDDF__KeyTrigger         *message);
size_t dm_input_ddf__key_trigger__get_packed_size
                     (const DmInputDDF__KeyTrigger   *message);
size_t dm_input_ddf__key_trigger__pack
                     (const DmInputDDF__KeyTrigger   *message,
                      uint8_t             *out);
size_t dm_input_ddf__key_trigger__pack_to_buffer
                     (const DmInputDDF__KeyTrigger   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__KeyTrigger *
       dm_input_ddf__key_trigger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__key_trigger__free_unpacked
                     (DmInputDDF__KeyTrigger *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__MouseTrigger methods */
void   dm_input_ddf__mouse_trigger__init
                     (DmInputDDF__MouseTrigger         *message);
size_t dm_input_ddf__mouse_trigger__get_packed_size
                     (const DmInputDDF__MouseTrigger   *message);
size_t dm_input_ddf__mouse_trigger__pack
                     (const DmInputDDF__MouseTrigger   *message,
                      uint8_t             *out);
size_t dm_input_ddf__mouse_trigger__pack_to_buffer
                     (const DmInputDDF__MouseTrigger   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__MouseTrigger *
       dm_input_ddf__mouse_trigger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__mouse_trigger__free_unpacked
                     (DmInputDDF__MouseTrigger *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__GamepadTrigger methods */
void   dm_input_ddf__gamepad_trigger__init
                     (DmInputDDF__GamepadTrigger         *message);
size_t dm_input_ddf__gamepad_trigger__get_packed_size
                     (const DmInputDDF__GamepadTrigger   *message);
size_t dm_input_ddf__gamepad_trigger__pack
                     (const DmInputDDF__GamepadTrigger   *message,
                      uint8_t             *out);
size_t dm_input_ddf__gamepad_trigger__pack_to_buffer
                     (const DmInputDDF__GamepadTrigger   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__GamepadTrigger *
       dm_input_ddf__gamepad_trigger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__gamepad_trigger__free_unpacked
                     (DmInputDDF__GamepadTrigger *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__TouchTrigger methods */
void   dm_input_ddf__touch_trigger__init
                     (DmInputDDF__TouchTrigger         *message);
size_t dm_input_ddf__touch_trigger__get_packed_size
                     (const DmInputDDF__TouchTrigger   *message);
size_t dm_input_ddf__touch_trigger__pack
                     (const DmInputDDF__TouchTrigger   *message,
                      uint8_t             *out);
size_t dm_input_ddf__touch_trigger__pack_to_buffer
                     (const DmInputDDF__TouchTrigger   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__TouchTrigger *
       dm_input_ddf__touch_trigger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__touch_trigger__free_unpacked
                     (DmInputDDF__TouchTrigger *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__TextTrigger methods */
void   dm_input_ddf__text_trigger__init
                     (DmInputDDF__TextTrigger         *message);
size_t dm_input_ddf__text_trigger__get_packed_size
                     (const DmInputDDF__TextTrigger   *message);
size_t dm_input_ddf__text_trigger__pack
                     (const DmInputDDF__TextTrigger   *message,
                      uint8_t             *out);
size_t dm_input_ddf__text_trigger__pack_to_buffer
                     (const DmInputDDF__TextTrigger   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__TextTrigger *
       dm_input_ddf__text_trigger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__text_trigger__free_unpacked
                     (DmInputDDF__TextTrigger *message,
                      ProtobufCAllocator *allocator);
/* DmInputDDF__InputBinding methods */
void   dm_input_ddf__input_binding__init
                     (DmInputDDF__InputBinding         *message);
size_t dm_input_ddf__input_binding__get_packed_size
                     (const DmInputDDF__InputBinding   *message);
size_t dm_input_ddf__input_binding__pack
                     (const DmInputDDF__InputBinding   *message,
                      uint8_t             *out);
size_t dm_input_ddf__input_binding__pack_to_buffer
                     (const DmInputDDF__InputBinding   *message,
                      ProtobufCBuffer     *buffer);
DmInputDDF__InputBinding *
       dm_input_ddf__input_binding__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_input_ddf__input_binding__free_unpacked
                     (DmInputDDF__InputBinding *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmInputDDF__GamepadModifierT_Closure)
                 (const DmInputDDF__GamepadModifierT *message,
                  void *closure_data);
typedef void (*DmInputDDF__GamepadMapEntry_Closure)
                 (const DmInputDDF__GamepadMapEntry *message,
                  void *closure_data);
typedef void (*DmInputDDF__GamepadMap_Closure)
                 (const DmInputDDF__GamepadMap *message,
                  void *closure_data);
typedef void (*DmInputDDF__GamepadMaps_Closure)
                 (const DmInputDDF__GamepadMaps *message,
                  void *closure_data);
typedef void (*DmInputDDF__KeyTrigger_Closure)
                 (const DmInputDDF__KeyTrigger *message,
                  void *closure_data);
typedef void (*DmInputDDF__MouseTrigger_Closure)
                 (const DmInputDDF__MouseTrigger *message,
                  void *closure_data);
typedef void (*DmInputDDF__GamepadTrigger_Closure)
                 (const DmInputDDF__GamepadTrigger *message,
                  void *closure_data);
typedef void (*DmInputDDF__TouchTrigger_Closure)
                 (const DmInputDDF__TouchTrigger *message,
                  void *closure_data);
typedef void (*DmInputDDF__TextTrigger_Closure)
                 (const DmInputDDF__TextTrigger *message,
                  void *closure_data);
typedef void (*DmInputDDF__InputBinding_Closure)
                 (const DmInputDDF__InputBinding *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    dm_input_ddf__key__descriptor;
extern const ProtobufCEnumDescriptor    dm_input_ddf__mouse__descriptor;
extern const ProtobufCEnumDescriptor    dm_input_ddf__gamepad__descriptor;
extern const ProtobufCEnumDescriptor    dm_input_ddf__gamepad_type__descriptor;
extern const ProtobufCEnumDescriptor    dm_input_ddf__gamepad_modifier__descriptor;
extern const ProtobufCEnumDescriptor    dm_input_ddf__touch__descriptor;
extern const ProtobufCEnumDescriptor    dm_input_ddf__text__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__gamepad_modifier_t__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__gamepad_map_entry__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__gamepad_map__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__gamepad_maps__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__key_trigger__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__mouse_trigger__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__gamepad_trigger__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__touch_trigger__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__text_trigger__descriptor;
extern const ProtobufCMessageDescriptor dm_input_ddf__input_binding__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_input_2finput_5fddf_2eproto__INCLUDED */
