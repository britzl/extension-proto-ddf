/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: graphics/graphics_ddf.proto */

#ifndef PROTOBUF_C_graphics_2fgraphics_5fddf_2eproto__INCLUDED
#define PROTOBUF_C_graphics_2fgraphics_5fddf_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ddf/ddf_extensions.pb-c.h"

typedef struct DmGraphics__Cubemap DmGraphics__Cubemap;
typedef struct DmGraphics__TextureImage DmGraphics__TextureImage;
typedef struct DmGraphics__TextureImage__Image DmGraphics__TextureImage__Image;
typedef struct DmGraphics__TextureFormatAlternative DmGraphics__TextureFormatAlternative;
typedef struct DmGraphics__PathSettings DmGraphics__PathSettings;
typedef struct DmGraphics__PlatformProfile DmGraphics__PlatformProfile;
typedef struct DmGraphics__TextureProfile DmGraphics__TextureProfile;
typedef struct DmGraphics__TextureProfiles DmGraphics__TextureProfiles;
typedef struct DmGraphics__ShaderDesc DmGraphics__ShaderDesc;
typedef struct DmGraphics__ShaderDesc__ResourceBinding DmGraphics__ShaderDesc__ResourceBinding;
typedef struct DmGraphics__ShaderDesc__Shader DmGraphics__ShaderDesc__Shader;


/* --- enums --- */

typedef enum _DmGraphics__TextureImage__Type {
  /*
   * Corresponds to GL_TEXTURE_2D
   */
  DM_GRAPHICS__TEXTURE_IMAGE__TYPE__TYPE_2D = 1,
  /*
   * Corresponds to GL_TEXTURE_CUBE_MAP
   */
  DM_GRAPHICS__TEXTURE_IMAGE__TYPE__TYPE_CUBEMAP = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GRAPHICS__TEXTURE_IMAGE__TYPE)
} DmGraphics__TextureImage__Type;
typedef enum _DmGraphics__TextureImage__CompressionType {
  /*
   * Not compressed
   */
  DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_TYPE__COMPRESSION_TYPE_DEFAULT = 0,
  /*
   * WebP encoded (Deprecated, converts to Default)
   */
  DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_TYPE__COMPRESSION_TYPE_WEBP = 1,
  /*
   * WebP lossy encoded (Deprecated, converts to UASTC)
   */
  DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_TYPE__COMPRESSION_TYPE_WEBP_LOSSY = 2,
  /*
   * Basis UASTC
   */
  DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_TYPE__COMPRESSION_TYPE_BASIS_UASTC = 3,
  /*
   * Basis ETC1S
   */
  DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_TYPE__COMPRESSION_TYPE_BASIS_ETC1S = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_TYPE)
} DmGraphics__TextureImage__CompressionType;
typedef enum _DmGraphics__TextureImage__CompressionFlags {
  /*
   * RGB to be cleared when A is zero
   */
  DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_FLAGS__COMPRESSION_FLAG_ALPHA_CLEAN = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_FLAGS)
} DmGraphics__TextureImage__CompressionFlags;
typedef enum _DmGraphics__TextureImage__TextureFormat {
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_LUMINANCE = 0,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGB = 1,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGBA = 2,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGB_PVRTC_2BPPV1 = 3,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGB_PVRTC_4BPPV1 = 4,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1 = 5,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1 = 6,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGB_ETC1 = 7,
  /*
   * 565
   */
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGB_16BPP = 8,
  /*
   * 4444
   */
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGBA_16BPP = 9,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_LUMINANCE_ALPHA = 10,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGBA_ETC2 = 11,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGBA_ASTC_4x4 = 12,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGB_BC1 = 13,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGBA_BC3 = 14,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_R_BC4 = 15,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RG_BC5 = 16,
  DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_RGBA_BC7 = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT)
} DmGraphics__TextureImage__TextureFormat;
typedef enum _DmGraphics__TextureFormatAlternative__CompressionLevel {
  DM_GRAPHICS__TEXTURE_FORMAT_ALTERNATIVE__COMPRESSION_LEVEL__FAST = 0,
  DM_GRAPHICS__TEXTURE_FORMAT_ALTERNATIVE__COMPRESSION_LEVEL__NORMAL = 1,
  DM_GRAPHICS__TEXTURE_FORMAT_ALTERNATIVE__COMPRESSION_LEVEL__HIGH = 2,
  DM_GRAPHICS__TEXTURE_FORMAT_ALTERNATIVE__COMPRESSION_LEVEL__BEST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GRAPHICS__TEXTURE_FORMAT_ALTERNATIVE__COMPRESSION_LEVEL)
} DmGraphics__TextureFormatAlternative__CompressionLevel;
typedef enum _DmGraphics__PlatformProfile__OS {
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_GENERIC = 0,
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_WINDOWS = 1,
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_OSX = 2,
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_LINUX = 3,
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_IOS = 4,
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_ANDROID = 5,
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_WEB = 6,
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_SWITCH = 7,
  DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_PS4 = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GRAPHICS__PLATFORM_PROFILE__OS)
} DmGraphics__PlatformProfile__OS;
typedef enum _DmGraphics__ShaderDesc__Language {
  /*
   * OpenGLES 2 compatible
   */
  DM_GRAPHICS__SHADER_DESC__LANGUAGE__LANGUAGE_GLSL_SM120 = 1,
  /*
   * OpenGLES 3 compatible
   */
  DM_GRAPHICS__SHADER_DESC__LANGUAGE__LANGUAGE_GLSL_SM140 = 2,
  /*
   * OpenGLES 2 / WebGL 1
   */
  DM_GRAPHICS__SHADER_DESC__LANGUAGE__LANGUAGE_GLES_SM100 = 3,
  /*
   * OpenGLES 3 / WebGL 2
   */
  DM_GRAPHICS__SHADER_DESC__LANGUAGE__LANGUAGE_GLES_SM300 = 4,
  DM_GRAPHICS__SHADER_DESC__LANGUAGE__LANGUAGE_SPIRV = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GRAPHICS__SHADER_DESC__LANGUAGE)
} DmGraphics__ShaderDesc__Language;
typedef enum _DmGraphics__ShaderDesc__ShaderDataType {
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_UNKNOWN = 0,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_INT = 1,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_UINT = 2,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_FLOAT = 3,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_VEC2 = 4,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_VEC3 = 5,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_VEC4 = 6,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_MAT2 = 7,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_MAT3 = 8,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_MAT4 = 9,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_SAMPLER2D = 10,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_SAMPLER3D = 11,
  DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_SAMPLER_CUBE = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE)
} DmGraphics__ShaderDesc__ShaderDataType;

/* --- messages --- */

struct  DmGraphics__Cubemap
{
  ProtobufCMessage base;
  char *right;
  char *left;
  char *top;
  char *bottom;
  char *front;
  char *back;
};
#define DM_GRAPHICS__CUBEMAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__cubemap__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  DmGraphics__TextureImage__Image
{
  ProtobufCMessage base;
  uint32_t width;
  uint32_t height;
  uint32_t original_width;
  uint32_t original_height;
  DmGraphics__TextureImage__TextureFormat format;
  size_t n_mip_map_offset;
  uint32_t *mip_map_offset;
  /*
   * always uncompressed (native) size
   */
  size_t n_mip_map_size;
  uint32_t *mip_map_size;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_compression_type;
  DmGraphics__TextureImage__CompressionType compression_type;
  protobuf_c_boolean has_compression_flags;
  uint64_t compression_flags;
  size_t n_mip_map_size_compressed;
  uint32_t *mip_map_size_compressed;
};
#define DM_GRAPHICS__TEXTURE_IMAGE__IMAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__texture_image__image__descriptor) \
    , 0, 0, 0, 0, DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_LUMINANCE, 0,NULL, 0,NULL, {0,NULL}, 0, DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_TYPE__COMPRESSION_TYPE_DEFAULT, 0, 0, 0,NULL }


struct  DmGraphics__TextureImage
{
  ProtobufCMessage base;
  size_t n_alternatives;
  DmGraphics__TextureImage__Image **alternatives;
  DmGraphics__TextureImage__Type type;
  /*
   * When count > 1 count mipmaps are laid out contiguously in memory and
   * the mip_map_offset should reflect that, e.g. times 6 for cubemaps
   */
  uint32_t count;
};
#define DM_GRAPHICS__TEXTURE_IMAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__texture_image__descriptor) \
    , 0,NULL, DM_GRAPHICS__TEXTURE_IMAGE__TYPE__TYPE_2D, 0 }


/*
 * We encapsulate the texture format in its own message due
 * to we cant have repeated enums.
 */
struct  DmGraphics__TextureFormatAlternative
{
  ProtobufCMessage base;
  DmGraphics__TextureImage__TextureFormat format;
  DmGraphics__TextureFormatAlternative__CompressionLevel compression_level;
  protobuf_c_boolean has_compression_type;
  DmGraphics__TextureImage__CompressionType compression_type;
};
#define DM_GRAPHICS__TEXTURE_FORMAT_ALTERNATIVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__texture_format_alternative__descriptor) \
    , DM_GRAPHICS__TEXTURE_IMAGE__TEXTURE_FORMAT__TEXTURE_FORMAT_LUMINANCE, DM_GRAPHICS__TEXTURE_FORMAT_ALTERNATIVE__COMPRESSION_LEVEL__FAST, 0, DM_GRAPHICS__TEXTURE_IMAGE__COMPRESSION_TYPE__COMPRESSION_TYPE_DEFAULT }


struct  DmGraphics__PathSettings
{
  ProtobufCMessage base;
  char *path;
  char *profile;
};
#define DM_GRAPHICS__PATH_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__path_settings__descriptor) \
    , NULL, NULL }


struct  DmGraphics__PlatformProfile
{
  ProtobufCMessage base;
  DmGraphics__PlatformProfile__OS os;
  size_t n_formats;
  DmGraphics__TextureFormatAlternative **formats;
  protobuf_c_boolean mipmaps;
  protobuf_c_boolean has_max_texture_size;
  uint32_t max_texture_size;
  protobuf_c_boolean has_premultiply_alpha;
  protobuf_c_boolean premultiply_alpha;
};
#define DM_GRAPHICS__PLATFORM_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__platform_profile__descriptor) \
    , DM_GRAPHICS__PLATFORM_PROFILE__OS__OS_ID_GENERIC, 0,NULL, 0, 0, 0, 0, 1 }


struct  DmGraphics__TextureProfile
{
  ProtobufCMessage base;
  char *name;
  size_t n_platforms;
  DmGraphics__PlatformProfile **platforms;
};
#define DM_GRAPHICS__TEXTURE_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__texture_profile__descriptor) \
    , NULL, 0,NULL }


struct  DmGraphics__TextureProfiles
{
  ProtobufCMessage base;
  size_t n_path_settings;
  DmGraphics__PathSettings **path_settings;
  size_t n_profiles;
  DmGraphics__TextureProfile **profiles;
};
#define DM_GRAPHICS__TEXTURE_PROFILES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__texture_profiles__descriptor) \
    , 0,NULL, 0,NULL }


struct  DmGraphics__ShaderDesc__ResourceBinding
{
  ProtobufCMessage base;
  char *name;
  DmGraphics__ShaderDesc__ShaderDataType type;
  protobuf_c_boolean has_element_count;
  uint32_t element_count;
  protobuf_c_boolean has_set;
  uint32_t set;
  protobuf_c_boolean has_binding;
  uint32_t binding;
};
#define DM_GRAPHICS__SHADER_DESC__RESOURCE_BINDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__shader_desc__resource_binding__descriptor) \
    , NULL, DM_GRAPHICS__SHADER_DESC__SHADER_DATA_TYPE__SHADER_TYPE_UNKNOWN, 0, 1u, 0, 0u, 0, 0u }


struct  DmGraphics__ShaderDesc__Shader
{
  ProtobufCMessage base;
  DmGraphics__ShaderDesc__Language language;
  protobuf_c_boolean has_source;
  ProtobufCBinaryData source;
  size_t n_uniforms;
  DmGraphics__ShaderDesc__ResourceBinding **uniforms;
  size_t n_attributes;
  DmGraphics__ShaderDesc__ResourceBinding **attributes;
};
#define DM_GRAPHICS__SHADER_DESC__SHADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__shader_desc__shader__descriptor) \
    , DM_GRAPHICS__SHADER_DESC__LANGUAGE__LANGUAGE_GLSL_SM120, 0, {0,NULL}, 0,NULL, 0,NULL }


struct  DmGraphics__ShaderDesc
{
  ProtobufCMessage base;
  size_t n_shaders;
  DmGraphics__ShaderDesc__Shader **shaders;
};
#define DM_GRAPHICS__SHADER_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dm_graphics__shader_desc__descriptor) \
    , 0,NULL }


/* DmGraphics__Cubemap methods */
void   dm_graphics__cubemap__init
                     (DmGraphics__Cubemap         *message);
size_t dm_graphics__cubemap__get_packed_size
                     (const DmGraphics__Cubemap   *message);
size_t dm_graphics__cubemap__pack
                     (const DmGraphics__Cubemap   *message,
                      uint8_t             *out);
size_t dm_graphics__cubemap__pack_to_buffer
                     (const DmGraphics__Cubemap   *message,
                      ProtobufCBuffer     *buffer);
DmGraphics__Cubemap *
       dm_graphics__cubemap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_graphics__cubemap__free_unpacked
                     (DmGraphics__Cubemap *message,
                      ProtobufCAllocator *allocator);
/* DmGraphics__TextureImage__Image methods */
void   dm_graphics__texture_image__image__init
                     (DmGraphics__TextureImage__Image         *message);
/* DmGraphics__TextureImage methods */
void   dm_graphics__texture_image__init
                     (DmGraphics__TextureImage         *message);
size_t dm_graphics__texture_image__get_packed_size
                     (const DmGraphics__TextureImage   *message);
size_t dm_graphics__texture_image__pack
                     (const DmGraphics__TextureImage   *message,
                      uint8_t             *out);
size_t dm_graphics__texture_image__pack_to_buffer
                     (const DmGraphics__TextureImage   *message,
                      ProtobufCBuffer     *buffer);
DmGraphics__TextureImage *
       dm_graphics__texture_image__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_graphics__texture_image__free_unpacked
                     (DmGraphics__TextureImage *message,
                      ProtobufCAllocator *allocator);
/* DmGraphics__TextureFormatAlternative methods */
void   dm_graphics__texture_format_alternative__init
                     (DmGraphics__TextureFormatAlternative         *message);
size_t dm_graphics__texture_format_alternative__get_packed_size
                     (const DmGraphics__TextureFormatAlternative   *message);
size_t dm_graphics__texture_format_alternative__pack
                     (const DmGraphics__TextureFormatAlternative   *message,
                      uint8_t             *out);
size_t dm_graphics__texture_format_alternative__pack_to_buffer
                     (const DmGraphics__TextureFormatAlternative   *message,
                      ProtobufCBuffer     *buffer);
DmGraphics__TextureFormatAlternative *
       dm_graphics__texture_format_alternative__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_graphics__texture_format_alternative__free_unpacked
                     (DmGraphics__TextureFormatAlternative *message,
                      ProtobufCAllocator *allocator);
/* DmGraphics__PathSettings methods */
void   dm_graphics__path_settings__init
                     (DmGraphics__PathSettings         *message);
size_t dm_graphics__path_settings__get_packed_size
                     (const DmGraphics__PathSettings   *message);
size_t dm_graphics__path_settings__pack
                     (const DmGraphics__PathSettings   *message,
                      uint8_t             *out);
size_t dm_graphics__path_settings__pack_to_buffer
                     (const DmGraphics__PathSettings   *message,
                      ProtobufCBuffer     *buffer);
DmGraphics__PathSettings *
       dm_graphics__path_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_graphics__path_settings__free_unpacked
                     (DmGraphics__PathSettings *message,
                      ProtobufCAllocator *allocator);
/* DmGraphics__PlatformProfile methods */
void   dm_graphics__platform_profile__init
                     (DmGraphics__PlatformProfile         *message);
size_t dm_graphics__platform_profile__get_packed_size
                     (const DmGraphics__PlatformProfile   *message);
size_t dm_graphics__platform_profile__pack
                     (const DmGraphics__PlatformProfile   *message,
                      uint8_t             *out);
size_t dm_graphics__platform_profile__pack_to_buffer
                     (const DmGraphics__PlatformProfile   *message,
                      ProtobufCBuffer     *buffer);
DmGraphics__PlatformProfile *
       dm_graphics__platform_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_graphics__platform_profile__free_unpacked
                     (DmGraphics__PlatformProfile *message,
                      ProtobufCAllocator *allocator);
/* DmGraphics__TextureProfile methods */
void   dm_graphics__texture_profile__init
                     (DmGraphics__TextureProfile         *message);
size_t dm_graphics__texture_profile__get_packed_size
                     (const DmGraphics__TextureProfile   *message);
size_t dm_graphics__texture_profile__pack
                     (const DmGraphics__TextureProfile   *message,
                      uint8_t             *out);
size_t dm_graphics__texture_profile__pack_to_buffer
                     (const DmGraphics__TextureProfile   *message,
                      ProtobufCBuffer     *buffer);
DmGraphics__TextureProfile *
       dm_graphics__texture_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_graphics__texture_profile__free_unpacked
                     (DmGraphics__TextureProfile *message,
                      ProtobufCAllocator *allocator);
/* DmGraphics__TextureProfiles methods */
void   dm_graphics__texture_profiles__init
                     (DmGraphics__TextureProfiles         *message);
size_t dm_graphics__texture_profiles__get_packed_size
                     (const DmGraphics__TextureProfiles   *message);
size_t dm_graphics__texture_profiles__pack
                     (const DmGraphics__TextureProfiles   *message,
                      uint8_t             *out);
size_t dm_graphics__texture_profiles__pack_to_buffer
                     (const DmGraphics__TextureProfiles   *message,
                      ProtobufCBuffer     *buffer);
DmGraphics__TextureProfiles *
       dm_graphics__texture_profiles__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_graphics__texture_profiles__free_unpacked
                     (DmGraphics__TextureProfiles *message,
                      ProtobufCAllocator *allocator);
/* DmGraphics__ShaderDesc__ResourceBinding methods */
void   dm_graphics__shader_desc__resource_binding__init
                     (DmGraphics__ShaderDesc__ResourceBinding         *message);
/* DmGraphics__ShaderDesc__Shader methods */
void   dm_graphics__shader_desc__shader__init
                     (DmGraphics__ShaderDesc__Shader         *message);
/* DmGraphics__ShaderDesc methods */
void   dm_graphics__shader_desc__init
                     (DmGraphics__ShaderDesc         *message);
size_t dm_graphics__shader_desc__get_packed_size
                     (const DmGraphics__ShaderDesc   *message);
size_t dm_graphics__shader_desc__pack
                     (const DmGraphics__ShaderDesc   *message,
                      uint8_t             *out);
size_t dm_graphics__shader_desc__pack_to_buffer
                     (const DmGraphics__ShaderDesc   *message,
                      ProtobufCBuffer     *buffer);
DmGraphics__ShaderDesc *
       dm_graphics__shader_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dm_graphics__shader_desc__free_unpacked
                     (DmGraphics__ShaderDesc *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DmGraphics__Cubemap_Closure)
                 (const DmGraphics__Cubemap *message,
                  void *closure_data);
typedef void (*DmGraphics__TextureImage__Image_Closure)
                 (const DmGraphics__TextureImage__Image *message,
                  void *closure_data);
typedef void (*DmGraphics__TextureImage_Closure)
                 (const DmGraphics__TextureImage *message,
                  void *closure_data);
typedef void (*DmGraphics__TextureFormatAlternative_Closure)
                 (const DmGraphics__TextureFormatAlternative *message,
                  void *closure_data);
typedef void (*DmGraphics__PathSettings_Closure)
                 (const DmGraphics__PathSettings *message,
                  void *closure_data);
typedef void (*DmGraphics__PlatformProfile_Closure)
                 (const DmGraphics__PlatformProfile *message,
                  void *closure_data);
typedef void (*DmGraphics__TextureProfile_Closure)
                 (const DmGraphics__TextureProfile *message,
                  void *closure_data);
typedef void (*DmGraphics__TextureProfiles_Closure)
                 (const DmGraphics__TextureProfiles *message,
                  void *closure_data);
typedef void (*DmGraphics__ShaderDesc__ResourceBinding_Closure)
                 (const DmGraphics__ShaderDesc__ResourceBinding *message,
                  void *closure_data);
typedef void (*DmGraphics__ShaderDesc__Shader_Closure)
                 (const DmGraphics__ShaderDesc__Shader *message,
                  void *closure_data);
typedef void (*DmGraphics__ShaderDesc_Closure)
                 (const DmGraphics__ShaderDesc *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dm_graphics__cubemap__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__texture_image__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__texture_image__image__descriptor;
extern const ProtobufCEnumDescriptor    dm_graphics__texture_image__type__descriptor;
extern const ProtobufCEnumDescriptor    dm_graphics__texture_image__compression_type__descriptor;
extern const ProtobufCEnumDescriptor    dm_graphics__texture_image__compression_flags__descriptor;
extern const ProtobufCEnumDescriptor    dm_graphics__texture_image__texture_format__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__texture_format_alternative__descriptor;
extern const ProtobufCEnumDescriptor    dm_graphics__texture_format_alternative__compression_level__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__path_settings__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__platform_profile__descriptor;
extern const ProtobufCEnumDescriptor    dm_graphics__platform_profile__os__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__texture_profile__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__texture_profiles__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__shader_desc__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__shader_desc__resource_binding__descriptor;
extern const ProtobufCMessageDescriptor dm_graphics__shader_desc__shader__descriptor;
extern const ProtobufCEnumDescriptor    dm_graphics__shader_desc__language__descriptor;
extern const ProtobufCEnumDescriptor    dm_graphics__shader_desc__shader_data_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_graphics_2fgraphics_5fddf_2eproto__INCLUDED */
